settings
{
	main
	{
		Description: "Play Overwatch with Apex Legends abilities! This mode is highly customizable! Whether its ability cooldowns, ultimate generation, and more! Created by: techdude04#1629 Github: https://tinyurl.com/ApexLegendsinOW"
		Mode Name: "Apex Abilities in Overwatch"
	}

	lobby
	{
		Max Team 1 Players: 4
		Max Team 2 Players: 4
		Return To Lobby: Never
	}

	modes
	{
		Assault

		Control

		Escort

		Hybrid

		General
		{
			Allow Hero Switching: Off
			Enemy Health Bars: Off
			Game Mode Start: Immediately
			Limit Roles: 2 Of Each Role Per Team
		}
	}

	heroes
	{
		General
		{
			D.Va
			{
				Spawn Without Mech: On
			}
		}
	}

	workshop
	{
		Apex Crosshair: On
		Replace Ability 1 with Sprint: Off
	}

	extensions
	{
		Buff Status Effects
		Debuff Status Effects
		Energy Explosion Effects
		Kinetic Explosion Effects
		Play More Effects
	}
}

variables
{
	global:
		0: zBloodhoundAbility
		1: BloodhoundUltimate
		2: BangaloreAbility
		3: BangaloreUltimate
		4: BangalorePassive
		5: WraithAbility
		6: WraithUltimate
		7: GibraltarAbility
		8: GibraltarUltimate
		9: LifelineAbility
		10: LifelineUltimate
		11: LifelinePassive
		12: PathfinderAbility
		13: PathfinderUltimate
		14: BangaloreSmokeDuration
		15: DimensionalRiftDuration
		16: DOCDuration
		17: UltimateGenerationType
		18: LegendPerHero
		19: LegendsList
		20: ReplaceAbility1WithSprint
		21: SprintIncrease
		22: SonarAngle
		24: ZiplineMeters
		25: ObjectiveHud
		26: GrappleRange
		27: LegendsHeroeslist
		28: UltGenRewards
		29: ObjectiveAlternative
		30: BarrierRange
		31: Team1Camera
		32: Team2Camera
		33: MirageAbility
		34: MiragePassive
		35: MirageUltimate
		36: MiragePassiveDuration
		37: OctaneAbility
		38: OctaneAbilityLength
		39: OctaneUltimate
		40: OctanePassiveHeal
		41: CryptoAbility
		42: CryptoUltimate
		43: CryptoCamera
		44: CausticAbility
		45: CausticUltimate
		46: GasTrapDamage
		47: CausticUltDamage
		48: TrapRadius
		49: CausticUltRadius
		50: EnableApexCrosshair
		51: OvertimeEnabled
		52: EnableSuddendeath
		53: Winningteam
		54: GameEnded
		55: YoungsmithAbility
		57: YoungsmithDuration
		59: KillLeader

	player:
		0: ChosenLegend
		1: UsedAbility
		2: SonarAbility
		3: SonarFiltered
		4: SonarLocations
		5: UsingUlt
		6: UltTimer
		7: LegendAbilityName
		8: LegendUltName
		9: LegendPassiveName
		10: PlayerArmor
		11: PlayerHealth
		15: UltimateIcon
		16: PortalLocations
		17: PortalOrb
		18: UltIcon
		19: Damage
		20: Ammo
		21: MaxAmmo
		22: LastEffectPhase
		23: AbilityLocation
		24: BombardmentLocation
		25: Array_I
		26: IsGrappleable
		27: GrappleTarget
		28: GrappleOffset
		29: GrappleEndpoint
		30: GrappleBeam
		31: SmokeEffects
		32: SmokeLocations
		33: AbilityActive
		34: UltActive
		35: PassiveActive
		36: UsingPassive
		37: PassiveLocation
		38: RangeChange
		39: AbilityIcon
		40: UltimateGen
		41: UltimateIncrease
		42: AbilityCooldown
		43: LastHero
		44: Zipline
		45: ZiplineBeam
		46: ZiplineEffects
		47: BombardmentLastCreated
		48: Decoy
		49: DecoyInWorldID
		50: UltLocation
		51: MenuSelection
		52: AvaliableLegends
		53: SelectedLegend
		54: CryptoCamera
		55: CausticGasLocation
		56: CausticUltimateLocation
		57: GasTrapEffect
		58: CausticUltEffect
		59: YoungsmithLunchboxLocation
}

subroutines
{
	0: HUD
	1: LegendInfoHUD
	2: PerPlayers
	3: StartBarrierShrink
}

rule("Initialize Global")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is In Setup == True;
	}

	actions
	{
		Global.Winningteam = Null;
		Global.LegendsList = Array(Custom String("Bloodhound"), Custom String("Gibraltar"), Custom String("Lifeline"), Custom String(
			"Pathfinder"), Custom String("Wraith"), Custom String("Bangalore"), Custom String("Mirage"), Custom String("Octane"),
			Custom String("Crypto"), Custom String("Caustic"));
		Global.Team1Camera = Empty Array;
		Global.Team2Camera = Empty Array;
		If(Global.LegendPerHero == True);
			Global.LegendsHeroeslist = Array(Hero(Bastion), Hero(Mei), Hero(Reaper), Hero(Zarya), Hero(Soldier: 76), Hero(Ana), Hero(Cassidy),
				Hero(Torbj√∂rn));
		Else;
			Global.LegendsHeroeslist = All Heroes;
			Modify Global Variable(LegendsHeroeslist, Remove From Array By Value, Hero(Brigitte));
			Modify Global Variable(LegendsHeroeslist, Remove From Array By Value, Hero(Moira));
			Modify Global Variable(LegendsHeroeslist, Remove From Array By Value, Hero(Reinhardt));
			Modify Global Variable(LegendsHeroeslist, Remove From Array By Value, Hero(Sigma));
			Global.BarrierRange = 200;
	}
}

rule("Initialize per player")
{
	event
	{
		Subroutine;
		PerPlayers;
	}

	actions
	{
		Event Player.CryptoCamera = Empty Array;
		Destroy All HUD Text;
		Wait(0.250, Ignore Condition);
		Disable Game Mode HUD(Event Player);
		Disable Hero HUD(Event Player);
		Call Subroutine(HUD);
		disabled Event Player.ChosenLegend = Custom String("Wraith");
		Event Player.UsingUlt = False;
		disabled Disable Scoreboard(Event Player);
		disabled Disable Messages(Event Player);
		disabled Disable Game Mode In-World UI(Event Player);
		disabled Call Subroutine(HUD);
		disabled Event Player.LegendAbilityName = Custom String("Eye of the Alfather");
		disabled Event Player.LegendUltName = Custom String("Beast of the Hunt");
		disabled Event Player.LegendPassiveName = Custom String("Tracker");
		Disable Death Spectate Target HUD(Event Player);
		Add Health Pool To Player(Event Player, Shields, 100, True, True);
		Add Health Pool To Player(Event Player, Armor, 1, False, False);
		Disable Nameplates(All Players(All Teams), All Players(All Teams));
		Event Player.PortalLocations = Empty Array;
		Event Player.PortalOrb = Empty Array;
		Start Forcing Player Outlines(All Players(Team Of(Event Player)), Event Player, True, Color(Aqua), Default);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Event Player.SmokeEffects = Empty Array;
		Start Forcing Player Outlines(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, False, Color(White), Default);
		Event Player.SonarLocations = Empty Array;
		disabled Small Message(Event Player, Custom String("Hold {0} to view {1}'s stats", Input Binding String(Button(Interact)),
			Event Player.ChosenLegend));
		If(Event Player.ChosenLegend == Custom String("Bloodhound"));
			Event Player.AbilityCooldown = Global.zBloodhoundAbility;
		Else If(Event Player.ChosenLegend == Custom String("Wraith"));
			Event Player.AbilityCooldown = Global.WraithAbility;
		Else If(Event Player.ChosenLegend == Custom String("Gibraltar"));
			Event Player.AbilityCooldown = Global.GibraltarAbility;
		Else If(Event Player.ChosenLegend == Custom String("Pathfinder"));
			Event Player.AbilityCooldown = Global.PathfinderAbility;
		Else If(Event Player.ChosenLegend == Custom String("Lifeline"));
			Event Player.AbilityCooldown = Global.LifelineAbility;
		Else If(Event Player.ChosenLegend == Custom String("Bangalore"));
			Event Player.AbilityCooldown = Global.BangaloreAbility;
		Else If(Event Player.ChosenLegend == Custom String("Mirage"));
			Event Player.AbilityCooldown = Global.MirageAbility;
		Else If(Event Player.ChosenLegend == Custom String("Octane"));
			Event Player.AbilityCooldown = Global.OctaneAbility;
		Else If(Event Player.ChosenLegend == Custom String("Crypto"));
			Event Player.AbilityCooldown = Global.CryptoAbility;
		Else If(Event Player.ChosenLegend == Custom String("Youngsmith"));
			Event Player.AbilityCooldown = Global.YoungsmithAbility;
	}
}

rule("Loop Legend Status")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		disabled Event Player.LastHero != Custom String("NULL");
		disabled Event Player.UsedAbility == False;
		disabled Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		If(Event Player.ChosenLegend == Custom String("Bloodhound"));
			Event Player.UltimateIncrease = Global.BloodhoundUltimate;
			Event Player.AbilityIcon = Ability Icon String(Hero(Widowmaker), Button(Ultimate));
			Event Player.LegendAbilityName = Custom String("Eye of the Alfather");
			Event Player.LegendUltName = Custom String("Beast of the Hunt");
			Event Player.LegendPassiveName = Custom String("Tracker");
			disabled Event Player.AbilityCooldown = Global.zBloodhoundAbility;
			Event Player.UltIcon = Icon String(Skull);
		Else If(Event Player.ChosenLegend == Custom String("Wraith"));
			disabled Event Player.AbilityCooldown = Global.WraithAbility;
			Event Player.UltimateIncrease = Global.WraithUltimate;
			Event Player.AbilityIcon = Icon String(Eye);
			Event Player.LegendAbilityName = Custom String("Into the Void");
			Event Player.LegendUltName = Custom String("Dimensional Rift");
			Event Player.LegendPassiveName = Custom String("Voices from the Void");
			Event Player.UltIcon = Ability Icon String(Hero(Symmetra), Button(Ability 2));
		Else If(Event Player.ChosenLegend == Custom String("Gibraltar"));
			Event Player.LegendAbilityName = Custom String("Dome of Protection");
			Event Player.LegendUltName = Custom String("Defensive Bombardment");
			Event Player.UltimateIncrease = Global.GibraltarUltimate;
			disabled Event Player.AbilityCooldown = Global.GibraltarAbility;
			Event Player.AbilityIcon = Ability Icon String(Hero(Winston), Button(Ability 2));
			Event Player.LegendPassiveName = Custom String("Gun Shield");
			Event Player.UltIcon = Ability Icon String(Hero(Junkrat), Button(Ultimate));
		Else If(Event Player.ChosenLegend == Custom String("Pathfinder"));
			Event Player.LegendAbilityName = Custom String("Grappling Hook");
			Event Player.UltimateIncrease = Global.PathfinderUltimate;
			disabled Event Player.AbilityCooldown = Global.PathfinderAbility;
			Event Player.AbilityIcon = Ability Icon String(Hero(Wrecking Ball), Button(Secondary Fire));
			Event Player.LegendUltName = Custom String("Zipline Gun");
			Event Player.LegendPassiveName = Custom String("Insider Knowledge");
			Event Player.UltIcon = Ability Icon String(Hero(Widowmaker), Button(Ability 1));
		Else If(Event Player.ChosenLegend == Custom String("Lifeline"));
			Event Player.UltimateIncrease = Global.LifelineUltimate;
			disabled Event Player.AbilityCooldown = Global.LifelineAbility;
			Event Player.AbilityIcon = Ability Icon String(Hero(Baptiste), Button(Ability 1));
			Event Player.LegendAbilityName = Custom String("D.O.C. Healing Drone");
			Event Player.LegendUltName = Custom String("Care Package");
			Event Player.LegendPassiveName = Custom String("Combat Revive");
			Event Player.UltIcon = Ability Icon String(Hero(Baptiste), Button(Ability 1));
		Else If(Event Player.ChosenLegend == Custom String("Bangalore"));
			Event Player.UltimateIncrease = Global.BangaloreUltimate;
			Event Player.AbilityIcon = Ability Icon String(Hero(Orisa), Button(Ultimate));
			disabled Event Player.AbilityCooldown = Global.BangaloreAbility;
			Event Player.LegendAbilityName = Custom String("Smoke Launcher");
			Event Player.LegendUltName = Custom String("Rolling Thunder");
			Event Player.LegendPassiveName = Custom String("Double Time");
			Event Player.UltIcon = Ability Icon String(Hero(Pharah), Button(Ultimate));
		Else If(Event Player.ChosenLegend == Custom String("Mirage"));
			Event Player.UltimateIncrease = Global.MirageUltimate;
			Event Player.AbilityIcon = Ability Icon String(Hero(Echo), Button(Ultimate));
			Event Player.LegendAbilityName = Custom String("Psyche Out");
			Event Player.LegendUltName = Custom String("Self Swap");
			Event Player.UltIcon = Ability Icon String(Hero(D.Va), Button(Ultimate));
			Event Player.LegendPassiveName = Custom String("Now You See Me");
		Else If(Event Player.ChosenLegend == Custom String("Octane"));
			Event Player.UltimateIncrease = Global.OctaneUltimate;
			Event Player.AbilityIcon = Ability Icon String(Hero(Soldier: 76), Button(Ability 1));
			Event Player.LegendAbilityName = Custom String("Stim");
			Event Player.LegendUltName = Custom String("Low Grav");
			Event Player.UltIcon = Ability Icon String(Hero(Pharah), Button(Ability 1));
			Event Player.LegendPassiveName = Custom String("Swift Mend");
		Else If(Event Player.ChosenLegend == Custom String("Crypto"));
			Event Player.UltimateIncrease = Global.CryptoUltimate;
			Event Player.AbilityIcon = Ability Icon String(Hero(Hanzo), Button(Ability 1));
			Event Player.LegendAbilityName = Custom String("Drone");
			Event Player.LegendUltName = Custom String("EMP");
		Else If(Event Player.ChosenLegend == Custom String("Caustic"));
			Event Player.UltimateIncrease = Global.CausticUltimate;
			Event Player.AbilityIcon = Ability Icon String(Hero(Widowmaker), Button(Ability 2));
			Event Player.LegendAbilityName = Custom String("Nox Trap");
			Event Player.LegendUltName = Custom String("Gas Grenade");
			Event Player.UltIcon = Icon String(Poison);
			Event Player.LegendPassiveName = Custom String("Nox Resistant");
			Event Player.UltIcon = Ability Icon String(Hero(Sombra), Button(Ability 2));
			Event Player.LegendPassiveName = Custom String("Enemy Detector");
		Else If(Event Player.ChosenLegend == Custom String("Youngsmith"));
			Event Player.UltimateIncrease = Global.LifelineUltimate;
			Event Player.AbilityIcon = Ability Icon String(Hero(Torbj√∂rn), Button(Ability 2));
			Event Player.LegendAbilityName = Custom String("Armor Box");
			Event Player.LegendUltName = Custom String("Together Again");
			Event Player.UltIcon = Ability Icon String(Hero(Mercy), Button(Ultimate));
			Event Player.LegendPassiveName = Custom String("Armor Regen");
		End;
		Loop If Condition Is True;
	}
}

rule("LEGEND SELECTOR")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Legend Selection Menu - Next")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Match Round == 1;
		Is In Setup == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.ChosenLegend == Custom String("Not Selected");
		Global.LegendPerHero == False;
	}

	actions
	{
		Event Player.MenuSelection += 1;
		Event Player.SelectedLegend = Event Player.AvaliableLegends[Event Player.MenuSelection];
		Play Effect(Event Player, Good Pickup Effect, Color(White), Event Player, 100);
		If(Count Of(Event Player.AvaliableLegends) - 1 < Event Player.MenuSelection);
			Event Player.MenuSelection = 0;
		End;
	}
}

rule("Legend Selection Menu - Previous")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Match Round == 1;
		Is In Setup == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Event Player.ChosenLegend == Custom String("Not Selected");
		Global.LegendPerHero == False;
	}

	actions
	{
		Event Player.MenuSelection -= 1;
		Event Player.SelectedLegend = Event Player.AvaliableLegends[Event Player.MenuSelection];
		Play Effect(Event Player, Good Pickup Effect, Color(White), Event Player, 100);
		If(0 > Event Player.MenuSelection);
			Event Player.MenuSelection = Count Of(Event Player.AvaliableLegends) - 1;
	}
}

rule("Legend Selection Menu - Lock in")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Match Round == 1;
		Is In Setup == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.ChosenLegend == Custom String("Not Selected");
		Global.LegendPerHero == False;
	}

	actions
	{
		If(Event Player.SelectedLegend == 0);
			Event Player.ChosenLegend = Event Player.AvaliableLegends[Random Integer(0, Count Of(Event Player.AvaliableLegends))];
			Play Effect(Event Player, Good Pickup Effect, Color(White), Event Player, 100);
			Modify Player Variable(All Players(Team Of(Event Player)), AvaliableLegends, Remove From Array By Value,
				Event Player.ChosenLegend);
		Else;
			Event Player.ChosenLegend = Event Player.SelectedLegend;
			Play Effect(Event Player, Good Pickup Effect, Color(White), Event Player, 100);
			Modify Player Variable(All Players(Team Of(Event Player)), AvaliableLegends, Remove From Array By Value,
				Event Player.ChosenLegend);
	}
}

rule("Legend Selection Menu - Not Locked in times up")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == False;
		Event Player.ChosenLegend == Custom String("Not Selected");
		Global.LegendPerHero == False;
	}

	actions
	{
		Event Player.ChosenLegend = Event Player.AvaliableLegends[Random Integer(1, Count Of(Event Player.AvaliableLegends))];
		Play Effect(Event Player, Good Pickup Effect, Color(White), Event Player, 100);
		Modify Player Variable(All Players(Team Of(Event Player)), AvaliableLegends, Remove From Array By Value,
			Event Player.ChosenLegend);
	}
}

rule("Health Pack Reward")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Event Was Health Pack == True;
	}

	actions
	{
		If(Global.UltGenRewards == True);
			If(Event Healing <= 75);
				Small Message(Event Player, Custom String("Small Healing +5 Ult Generation"));
				If(Global.UltimateGenerationType == True);
					Event Player.UltimateGen += 5;
				Else;
					Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 5);
				End;
			Else If(Event Healing > 75);
				Small Message(Event Player, Custom String("Big Healing +15 Ult Generation"));
				If(Global.UltimateGenerationType == True);
					Event Player.UltimateGen += 15;
				Else;
					Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 15);
				End;
			End;
	}
}

rule("Initialize Player spots - Character Selection")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Match Round == 1;
		Is In Setup == True;
	}

	actions
	{
		If(Current Map == Map(Hanamura));
			Global.LegendsHeroeslist = Array(Vector(-108.053, 16.300, -117.208), Vector(-111.007, 16.300, -118.062), Vector(-41.351, 1.500,
				-106.859), Vector(-115.312, 16.300, -116.257));
			Global.UltGenRewards = Array(Vector(92.612, -1.180, 2.738), Vector(89.466, -1.179, 1.778), Vector(91.188, -1.182, -1.725), Vector(
				93.688, -1.180, -4.326));
		Else If(Current Map == Map(Hanamura Winter));
			Global.LegendsHeroeslist = Array(Vector(-108.053, 16.300, -117.208), Vector(-111.007, 16.300, -118.062), Vector(-41.351, 1.500,
				-106.859), Vector(-115.312, 16.300, -116.257));
			Global.UltGenRewards = Array(Vector(92.612, -1.180, 2.738), Vector(89.466, -1.179, 1.778), Vector(91.188, -1.182, -1.725), Vector(
				93.688, -1.180, -4.326));
		Else If(Current Map == Map(Hollywood Halloween));
			Global.Team1Camera = Array(Vector(31.414, 2.917, -45.037), Vector(29.964, 3.232, -46.072));
			Global.Team2Camera = Array(Vector(31.414, 2.917, -45.037), Vector(29.964, 3.232, -46.072));
		Else If(Current Map == Map(Eichenwalde Halloween));
			Global.Team1Camera = Array(Vector(79.573, 14.002, -99.636), Vector(82.149, 13.983, -89.528));
			Global.Team2Camera = Array(Vector(79.573, 14.002, -99.636), Vector(82.149, 13.983, -89.528));
		Else If(Current Map == Map(Numbani));
			Global.Team1Camera = Array(Vector(137.476, -2.450, 50.310), Vector(137.352, -2.450, 54.095));
			Global.Team2Camera = Array(Vector(137.476, -2.450, 50.310), Vector(137.352, -2.450, 54.095));
		Else If(Current Map == Map(Hollywood));
			Global.Team1Camera = Array(Vector(31.414, 2.917, -45.037), Vector(29.964, 3.232, -46.072));
			Global.Team2Camera = Array(Vector(31.414, 2.917, -45.037), Vector(29.964, 3.232, -46.072));
		Else If(Current Map == Map(Eichenwalde));
			Global.Team1Camera = Array(Vector(79.573, 14.002, -99.636), Vector(82.149, 13.983, -89.528));
			Global.Team2Camera = Array(Vector(79.573, 14.002, -99.636), Vector(82.149, 13.983, -89.528));
		Else If(Current Map == Map(Watchpoint: Gibraltar));
			Global.Team1Camera = Array(Vector(107.041, -0.586, -26.308), Vector(107.915, -0.225, -26.964));
			Global.Team2Camera = Array(Vector(107.041, -0.586, -26.308), Vector(107.915, -0.225, -26.964));
		Else If(Current Map == Map(Route 66));
			Global.Team1Camera = Array(Vector(69.410, 1.314, 7.885), Vector(70.682, 1.278, 7.519));
			Global.Team2Camera = Array(Vector(69.410, 1.314, 7.885), Vector(70.682, 1.278, 7.519));
		Else If(Current Map == Map(Havana));
			Global.Team1Camera = Array(Vector(93.758, 6.556, -87.329), Vector(95.240, 7.035, -88.767));
			Global.Team2Camera = Array(Vector(93.758, 6.556, -87.329), Vector(95.240, 7.035, -88.767));
		Else If(Current Map == Map(Oasis));
			Global.Team1Camera = Array(Vector(118.349, 4.738, -197.699), Vector(118.293, 4.738, -197.635));
			Global.Team2Camera = Array(Vector(118.349, 4.739, -197.699), Vector(118.293, 4.738, -197.635));
		Else If(Current Map == Map(Nepal));
			Global.Team1Camera = Array(Vector(-219.914, -92.022, -0.118), Vector(-220.692, -92.022, 0.041));
			Global.Team2Camera = Array(Vector(-219.914, -92.022, -0.118), Vector(-220.692, -92.022, 0.041));
		Else If(Current Map == Map(Volskaya Industries));
			Global.Team1Camera = Array(Vector(-129.546, 0.840, 23.618), Vector(-112.120, -0.159, 33.879));
			Global.Team2Camera = Array(Vector(28.822, -1.160, -11.287), Vector(8.742, -3.160, 6.382));
		Else If(Current Map == Map(Temple of Anubis));
			Global.Team1Camera = Array(Vector(-12.323, 6.216, 150.778), Vector(-12.487, 6.205, 135.606));
			Global.Team2Camera = Array(Vector(3.199, 3.023, -37.649), Vector(21.824, 2.023, -24.123));
		Else If(Current Map == Map(Paris));
			Global.Team1Camera = Array(Vector(-115.540, 17.528, -123.892), Vector(-108.194, 16.550, -108.862));
			Global.Team2Camera = Array(Vector(26.979, 13.820, -79.504), Vector(20.495, 12.820, -68.278));
		Else If(Current Map == Map(Horizon Lunar Colony));
			Global.Team1Camera = Array(Vector(-42.514, 7.500, -180.003), Vector(107.915, -0.225, -26.964));
			Global.Team2Camera = Array(Vector(4.659, 10.300, -5.411), Vector(-9.625, 10.043, 1.870));
		End;
		disabled Pause Match Time;
		disabled Else If(Current Map == Map(Horizon Lunar Colony));
		disabled Global.Team1Camera = Array(Null, Null);
		disabled Global.Team2Camera = Array(Null, Null);
		Set Match Time(60);
	}
}

rule("Initialize Player spots - Character Selection")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Match Round == 1;
		Is In Setup == True;
	}

	actions
	{
		Wait(0.250, Abort When False);
		If(Global.ReplaceAbility1WithSprint == True);
			Disallow Button(Event Player, Button(Ability 1));
		End;
		Disallow Button(All Players(All Teams), Button(Ability 2));
		Disallow Button(All Players(All Teams), Button(Ultimate));
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Set Invisible(Event Player, All);
		Set Status(Event Player, Null, Hacked, 9999);
		Set Status(Event Player, Null, Rooted, 9999);
		If(Team Of(Event Player) == Team 1);
			Start Camera(Event Player, Global.Team1Camera[0], Global.Team1Camera[1], 0);
			Start Facing(Event Player, Facing Direction Of(Global.Team1Camera[Slot Of(Event Player)]), 0, To World, Direction and Turn Rate);
		Else If(Team Of(Event Player) == Team 2);
			Start Camera(Event Player, Global.Team2Camera[0], Global.Team2Camera[1], 0);
			Start Facing(Event Player, Facing Direction Of(Global.Team2Camera[Slot Of(Event Player)]), 0, To World, Direction and Turn Rate);
		End;
		Create HUD Text(Event Player, Custom String(" \r\n\r\n\r\n{0}\r\n{1}\r\n{2}\r\n\r\n\r\n\r\n", Custom String("Legend Selection"),
			Custom String("{1}\r\n{2}", Null, Custom String("{0} - {1}", Players In Slot(0, Team Of(Event Player)), Players In Slot(0,
			Team Of(Event Player)).ChosenLegend), Custom String("{0} - {1}", Players In Slot(1, Team Of(Event Player)), Players In Slot(1,
			Team Of(Event Player)).ChosenLegend)), Custom String("{1}\r\n{2}", Null, Custom String("{0} - {1}", Players In Slot(2, Team Of(
			Event Player)), Players In Slot(2, Team Of(Event Player)).ChosenLegend), Custom String("{0} - {1}", Players In Slot(3, Team Of(
			Event Player)), Players In Slot(3, Team Of(Event Player)).ChosenLegend))), Null, Null, Top, 1, Color(Red), Color(Red), Color(
			Red), Visible To and String, Default Visibility);
		If(Global.LegendPerHero == True);
			Create HUD Text(Event Player, Custom String("Crouch to change hero/legend"), Null, Null, Top, 2, Color(Red), Color(White), Color(
				White), Visible To and String, Default Visibility);
		Else;
			Create HUD Text(Event Player, Event Player.ChosenLegend != Custom String("Not Selected") ? Custom String("Locked in: {0}",
				Event Player.ChosenLegend) : Custom String("Selecting Legend: {0}", Event Player.SelectedLegend == 0 ? Custom String("Random")
				: Event Player.SelectedLegend), Event Player.ChosenLegend != Custom String("Not Selected") ? Custom String(" \r\n\r\n ")
				: Custom String("{0}\r\n{1}\r\n{2}", Custom String("{0} - Next Legend", Input Binding String(Button(Primary Fire))),
				Custom String("{0} - Previous Legend", Input Binding String(Button(Secondary Fire))), Custom String("{0} - Lock on Legend",
				Input Binding String(Button(Interact)))), Null, Top, 2, Color(Red), Color(White), Color(White), Visible To and String,
				Default Visibility);
			Event Player.AvaliableLegends = Global.LegendsList;
			Event Player.MenuSelection = 0;
			Event Player.SelectedLegend = Event Player.AvaliableLegends[0];
			Event Player.ChosenLegend = Custom String("Not Selected");
			Set Objective Description(Event Player, Custom String("Select Legend"), Visible To and String);
	}
}

disabled rule("Player Joins")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Call Subroutine(PerPlayers);
	}
}

rule("Crouch to Change - Character Selection")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Match Round == 1;
		Is In Setup == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Stunned, 1);
		Set Player Allowed Heroes(Event Player, Hero(Winston));
		Wait(0.016, Ignore Condition);
		Set Player Allowed Heroes(Event Player, Global.LegendsHeroeslist);
	}
}

rule("Time runs out - Character Selection")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == False;
		Match Round == 1;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Stop Camera(All Players(All Teams));
		Clear Status(All Players(All Teams), Rooted);
		Clear Status(All Players(All Teams), Hacked);
		Stop Facing(All Players(All Teams));
		Set Invisible(All Players(All Teams), None);
		If(Current Game Mode == Game Mode(Assault) || Current Game Mode == Game Mode(Hybrid));
			Teleport(All Players(Team 1), Objective Position(0));
		Else If(Current Game Mode == Game Mode(Escort));
			Teleport(All Players(Team 1), Vector(X Component Of(Payload Position), Y Component Of(Payload Position) + 1, Z Component Of(
				Payload Position)));
		End;
		Call Subroutine(PerPlayers);
	}
}

rule("Teammate player names")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Create In-World Text(All Players(Team Of(Event Player)), Custom String("{1}% {0} {2}", Event Player,
			Global.UltimateGenerationType == True ? Event Player.UltimateGen : Ultimate Charge Percent(Event Player), Custom String(
			"{0}{1}", Icon String(Heart), Normalized Health(Event Player) * 100)), Event Player, 1, Clip Against Surfaces,
			Visible To Position and String, Color(Aqua), Default Visibility);
	}
}

rule("Mission Objective Loop")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Wait(0.001, Ignore Condition);
		If(Current Game Mode == Game Mode(Assault));
			Global.ObjectiveHud = Custom String("{0} {1}", Point Capture Percentage, Match Time == 0 ? Custom String("Overtime")
				: Round To Integer(Match Time, To Nearest));
		Else If(Current Game Mode == Game Mode(Control));
			Global.ObjectiveHud = Custom String("Control Status: {0} - {1} - {2}", Is Control Mode Point Locked == True ? Round To Integer(
				Match Time, To Nearest) : (Control Mode Scoring Team == All Teams ? Point Capture Percentage : Control Mode Scoring Team),
				Custom String("{0} vs {1}", Control Mode Scoring Percentage(Team 1), Control Mode Scoring Percentage(Team 2)), Custom String(
				"{0} - {1}", Team Score(Team 1), Team Score(Team 2)));
		Else If(Current Game Mode == Game Mode(Escort));
			Global.ObjectiveHud = Custom String("{1} - Payload Progression: {0}", Payload Progress Percentage, Match Time == 0 ? Custom String(
				"Overtime") : Round To Integer(Match Time, To Nearest));
		Else If(Current Game Mode == Game Mode(Hybrid));
			Global.ObjectiveHud = Custom String("{1} - Payload Progression: {0}", Is Objective Complete(0)
				? Payload Progress Percentage : Point Capture Percentage, Match Time == 0 ? Custom String("Overtime") : Round To Integer(
				Match Time, To Nearest));
		Else If(Current Game Mode == Game Mode(Capture the Flag));
			Global.ObjectiveHud = Custom String("{1} - {0} vs {2}", Team Score(Team 1), Match Time == 0 ? Custom String("Overtime")
				: Round To Integer(Match Time, To Nearest), Team Score(Team 2));
			Global.ObjectiveAlternative = Current Game Mode == Game Mode(Capture the Flag) ? Custom String("{0}\r\n{1}", Custom String(
				"Team 1: {0}", Is Flag At Base(Team 1) ? Custom String("AT BASE") : Icon String(Warning)), Custom String("Team 2: {0}",
				Is Flag At Base(Team 2) ? Custom String("AT BASE") : Icon String(Warning))) : Null;
		Else If(Current Game Mode == Game Mode(Elimination));
			Global.ObjectiveHud = Custom String("{0} vs {1}", Custom String("{0} - {1}", Number Of Living Players(Team 1), Team Score(Team 1)),
				Custom String("{0} - {1}", Team Score(Team 2), Number Of Living Players(Team 2)));
		Else If(Current Game Mode == Game Mode(Team Deathmatch));
			Global.ObjectiveHud = Custom String("{0} vs {1} - {2}", Team Score(Team 1), Team Score(Team 2), Round To Integer(Match Time,
				To Nearest));
		Else If(Current Game Mode == Game Mode(Deathmatch));
			Global.ObjectiveHud = Custom String("Unknown Data");
		End;
		Loop;
	}
}

rule("If Map is incompatiable")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For Any(Array(Map(Workshop Chamber), Map(Workshop Expanse), Map(Workshop Expanse Night), Map(Workshop Island), Map(
			Workshop Island Night)), Current Array Element == Current Map) == True;
	}

	actions
	{
		Set Status(All Players(All Teams), Null, Frozen, 9999);
		Destroy All HUD Text;
		Wait(0.250, Ignore Condition);
		Create HUD Text(All Players(All Teams), Custom String("{0}\r\n{1}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
			Custom String("{0} {1} {0}", Icon String(Warning), Custom String(
			"THIS MAP ALONG WITH EVERY WORKSHOP SPECIFIC MAPS ARE NOT COMPATIABLE WITH THIS CODE!")), Custom String(
			"PLEASE DISABLE THE WORKSHOP MAPS AND RESTART THE MATCH")), Null, Null, Top, 0, Color(Red), Color(Red), Color(Red),
			Visible To and String, Default Visibility);
		Start Camera(All Players(All Teams), Vector(0, 0, 0), Vector(0, 0, 0), 0);
	}
}

rule("Players reach over 4")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Is True For Any(Array(Number Of Players(Team 1), Number Of Players(Team 2)), Current Array Element >= 5) == True;
		Count Of(Filtered Array(All Players(Team 1), Is Dummy Bot(Current Array Element) == False)) > 4;
		Count Of(Filtered Array(All Players(Team 2), Is Dummy Bot(Current Array Element) == False)) > 4;
	}

	actions
	{
		Set Status(All Players(All Teams), Null, Frozen, 9999);
		Destroy All HUD Text;
		Wait(0.250, Ignore Condition);
		Create HUD Text(All Players(All Teams), Custom String("{0}\r\n{1}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
			Custom String("{0} {1} {0}", Icon String(Warning), Custom String(
			"THE LIMIT OF PLAYERS HAS REACHED! THE CODE CAN ONLY RUN IF THERES 4 PLAYERS PER TEAM!")), Custom String(
			"PLEASE LOWER THE PLAYER COUNT AND RESTART THE MAP")), Null, Null, Top, 0, Color(Red), Color(Red), Color(Red),
			Visible To and String, Default Visibility);
		Start Camera(All Players(All Teams), Vector(0, 0, 0), Vector(0, 0, 0), 0);
	}
}

rule("Workshop Settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"General Settings"
		Global.LegendPerHero = Workshop Setting Toggle(Custom String("General Settings"), Custom String(
			"Legend Per Hero (Each Hero is a Legend)"), False, 0);
		Global.UltimateGenerationType = Workshop Setting Toggle(Custom String("General Settings"), Custom String(
			"Use Custom Ultimate Generation"), True, 0);
		Global.UltGenRewards = Workshop Setting Toggle(Custom String("General Settings"), Custom String("Use Ult Generation Rewards"),
			True, 0);
		Global.ReplaceAbility1WithSprint = Workshop Setting Toggle(Custom String("General Settings"), Custom String(
			"Replace Ability 1 with Sprint"), True, 0);
		Global.SprintIncrease = Workshop Setting Integer(Custom String("General Settings"), Custom String("Sprint Increase"), 25, 0, 100,
			0);
		Global.EnableApexCrosshair = Workshop Setting Toggle(Custom String("General Settings"), Custom String("Apex Crosshair"), False, 0);
		Global.EnableSuddendeath = Workshop Setting Toggle(Custom String("General Settings"), Custom String("Sudden Death on Overtime"),
			True, 0);
		"Bloodhound Settings"
		Global.zBloodhoundAbility = Workshop Setting Integer(Custom String("Bloodhound"), Custom String("Eye of the Alfather Cooldown"),
			25, 0, 100, 0);
		Global.BloodhoundUltimate = Workshop Setting Integer(Custom String("Bloodhound"), Custom String("Beast of the Hunt Generation"),
			180, 0, 500, 0);
		Global.SonarAngle = Workshop Setting Integer(Custom String("Bloodhound"), Custom String("Sonar Angle"), 45, 10, 360, 0);
		Global.SprintIncrease = Workshop Setting Integer(Custom String("Bloodhound"), Custom String("Sonar Distance"), 100, 10, 300, 0);
		"Bangalore Settings"
		Global.BangaloreSmokeDuration = Workshop Setting Integer(Custom String("Bangalore"), Custom String("Smoke Duration"), 23, 0, 100,
			0);
		Global.BangaloreAbility = Workshop Setting Integer(Custom String("Bangalore"), Custom String("Smoke Launcher Cooldown"), 10, 0,
			100, 0);
		Global.BangaloreUltimate = Workshop Setting Integer(Custom String("Bangalore"), Custom String(
			"Rolling Thunder Ultimate Generation"), 270, 0, 500, 0);
		Global.BangalorePassive = Workshop Setting Integer(Custom String("Bangalore"), Custom String("Double Time Cooldown"), 100, 0, 500,
			0);
		"Wraith Settings"
		Global.WraithAbility = Workshop Setting Integer(Custom String("Wraith"), Custom String("Into the Void Cooldown"), 25, 0, 100, 0);
		Global.WraithUltimate = Workshop Setting Integer(Custom String("Wraith"), Custom String("Dimensional Rift Generation"), 150, 0,
			500, 0);
		Global.DimensionalRiftDuration = Workshop Setting Integer(Custom String("Wraith"), Custom String(
			"Dimensional Rift Ultimate Duration"), 60, 0, 100, 0);
		"Gibraltar Settings"
		Global.GibraltarAbility = Workshop Setting Integer(Custom String("Gibraltar"), Custom String("Dome of Protection Cooldown"), 30, 0,
			100, 0);
		Global.GibraltarUltimate = Workshop Setting Integer(Custom String("Gibraltar"), Custom String(
			"Defensive Bombardment Ultimate Generation"), 180, 0, 500, 0);
		"Lifeline Settings"
		Global.DOCDuration = Workshop Setting Integer(Custom String("Lifeline"), Custom String("D.O.C. Duration"), 20, 0, 100, 0);
		Global.LifelineAbility = Workshop Setting Integer(Custom String("Lifeline"), Custom String("D.O.C. Heal Drone"), 45, 0, 100, 0);
		Global.LifelineUltimate = Workshop Setting Integer(Custom String("Lifeline"), Custom String("Massive Heal Ultimate Generation"),
			360, 0, 500, 0);
		Global.LifelinePassive = Workshop Setting Integer(Custom String("Lifeline"), Custom String("Combat Revive Cooldown"), 10, 0, 100,
			0);
		"Pathfinder Settings"
		Global.PathfinderAbility = Workshop Setting Integer(Custom String("Pathfinder"), Custom String("Grappling Hook Cooldown"), 35, 0,
			100, 0);
		Global.PathfinderUltimate = Workshop Setting Integer(Custom String("Pathfinder"), Custom String("Zipline Gun Ultimate Generation"),
			120, 0, 500, 0);
		Global.ZiplineMeters = Workshop Setting Integer(Custom String("Pathfinder"), Custom String("Zipline Gun Max Range"), 100, 0, 500,
			0);
		"Mirage Settings"
		Global.MirageAbility = Workshop Setting Integer(Custom String("Mirage"), Custom String("Psyche Out Cooldown"), 15, 0, 100, 0);
		Global.MirageUltimate = Workshop Setting Integer(Custom String("Mirage"), Custom String("Self Swap Ultimate Generation"), 60, 0,
			500, 0);
		Global.MiragePassive = Workshop Setting Integer(Custom String("Mirage"), Custom String("Now You See Me Cooldown"), 120, 0, 500, 0);
		"Octane Settings"
		Global.OctaneAbility = Workshop Setting Integer(Custom String("Octane"), Custom String("Stim Cooldown"), 2, 0, 100, 0);
		Global.OctaneUltimate = Workshop Setting Integer(Custom String("Octane"), Custom String("Low Grav Ultimate Generation"), 60, 0,
			500, 0);
		Global.OctanePassiveHeal = Workshop Setting Integer(Custom String("Octane"), Custom String("Swift Mend Heal Amount"), 1, 0, 100,
			0);
		Global.OctaneAbilityLength = Workshop Setting Integer(Custom String("Octane"), Custom String("Stim Ability Duration"), 6, 0, 100,
			0);
		"Crypto Settings"
		Global.CryptoAbility = Workshop Setting Integer(Custom String("Crypto"), Custom String("Drone Cooldown"), 10, 0, 100, 0);
		Global.CryptoUltimate = Workshop Setting Integer(Custom String("Crypto"), Custom String("EMP Ultimate Generation"), 180, 0, 500,
			0);
		Global.CryptoCamera = Workshop Setting Integer(Custom String("Crypto"), Custom String("Enemy Detection Radius"), 5, 0, 500, 0);
		"Caustic Settings"
		Global.CausticAbility = Workshop Setting Integer(Custom String("Caustic"), Custom String("Gas Trap Cooldown"), 25, 0, 100, 0);
		Global.CausticUltimate = Workshop Setting Integer(Custom String("Caustic"), Custom String("Gas Grenade Ultimate Generation"), 120,
			0, 500, 0);
		Global.TrapRadius = Workshop Setting Integer(Custom String("Caustic"), Custom String("Nox Trap Radius"), 5, 3, 50, 0);
		Global.GasTrapDamage = Workshop Setting Integer(Custom String("Caustic"), Custom String("Nox Trap Damage Per Second"), 12, 0, 100,
			0);
		Global.CausticUltRadius = Workshop Setting Integer(Custom String("Caustic"), Custom String("Gas Grenade Radius"), 8, 0, 50, 0);
		Global.CausticUltDamage = Workshop Setting Integer(Custom String("Caustic"), Custom String("Gas Grenade Damage Per Second"), 30, 0,
			100, 0);
	}
}

rule("Loop Legend Heroes if Toggle is on")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.LegendPerHero == True;
		Is Alive(Event Player) == True;
		Event Player.LastHero != Hero Of(Event Player);
	}

	actions
	{
		Set Player Allowed Heroes(Event Player, Global.LegendsHeroeslist);
		If(Hero Of(Event Player) == Hero(Reaper));
			Event Player.ChosenLegend = Custom String("Bloodhound");
		Else If(Hero Of(Event Player) == Hero(Bastion));
			Event Player.ChosenLegend = Custom String("Pathfinder");
		Else If(Hero Of(Event Player) == Hero(Zarya));
			Event Player.ChosenLegend = Custom String("Gibraltar");
		Else If(Hero Of(Event Player) == Hero(Soldier: 76));
			Event Player.ChosenLegend = Custom String("Lifeline");
		Else If(Hero Of(Event Player) == Hero(Mei));
			Event Player.ChosenLegend = Custom String("Wraith");
		Else If(Hero Of(Event Player) == Hero(Ana));
			Event Player.ChosenLegend = Custom String("Bangalore");
		Else If(Hero Of(Event Player) == Hero(Cassidy));
			Event Player.ChosenLegend = Custom String("Mirage");
			disabled Else If(Hero Of(Event Player) == Hero(Torbj√∂rn));
			disabled Event Player.ChosenLegend = Custom String("Youngsmith");
		End;
		Event Player.LastHero = Hero Of(Event Player);
	}
}

rule("Sprinting")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Event Player.UsedAbility == False;
		Event Player.AbilityActive == False;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Event Player.PassiveActive == False;
		Event Player.UltActive == False;
		Global.ReplaceAbility1WithSprint == True;
	}

	actions
	{
		Wait(0.001, Ignore Condition);
		Set Move Speed(Event Player, 100 + Global.SprintIncrease);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
	}
}

rule("Loop Ammo Changes")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Wait(0.001, Ignore Condition);
		If(Is In Alternate Form(Event Player) == True);
			Event Player.Ammo = Ammo(Event Player, 1);
			Event Player.MaxAmmo = Max Ammo(Event Player, 1);
		Else;
			Event Player.Ammo = Ammo(Event Player, 0);
			Event Player.MaxAmmo = Max Ammo(Event Player, 0);
		End;
		Loop;
	}
}

rule("Custom Ult Generation")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.UltimateGenerationType == True;
		Ultimate Charge Percent(Event Player) <= 100;
		Event Player.UltActive == False;
		Event Player.UsingUlt == False;
		Has Spawned(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Event Player.UltimateGen += 100 / Event Player.UltimateIncrease;
		Set Ultimate Charge(Event Player, Event Player.UltimateGen);
		Loop If Condition Is True;
	}
}

rule("Cooldown Timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.AbilityActive == False;
		Event Player.UsedAbility == True;
		Event Player.AbilityCooldown >= 0;
	}

	actions
	{
		Wait(1, Abort When False);
		Event Player.AbilityCooldown -= 1;
		Loop If Condition Is True;
	}
}

rule("Cooldown Timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.AbilityActive == False;
		Event Player.UsedAbility == False;
		disabled Event Player.AbilityCooldown >= 0;
	}

	actions
	{
		If(Event Player.ChosenLegend == Custom String("Bloodhound"));
			Event Player.AbilityCooldown = Global.zBloodhoundAbility;
		Else If(Event Player.ChosenLegend == Custom String("Wraith"));
			Event Player.AbilityCooldown = Global.WraithAbility;
		Else If(Event Player.ChosenLegend == Custom String("Gibraltar"));
			Event Player.AbilityCooldown = Global.GibraltarAbility;
		Else If(Event Player.ChosenLegend == Custom String("Pathfinder"));
			Event Player.AbilityCooldown = Global.PathfinderAbility;
		Else If(Event Player.ChosenLegend == Custom String("Lifeline"));
			Event Player.AbilityCooldown = Global.LifelineAbility;
		Else If(Event Player.ChosenLegend == Custom String("Bangalore"));
			Event Player.AbilityCooldown = Global.BangaloreAbility;
		Else If(Event Player.ChosenLegend == Custom String("Mirage"));
			Event Player.AbilityCooldown = Global.MirageAbility;
		Else If(Event Player.ChosenLegend == Custom String("Caustic"));
			Event Player.AbilityCooldown = Global.CausticAbility;
			disabled Else If(Event Player.ChosenLegend == Custom String("Octane"));
			disabled Else If(Event Player.ChosenLegend == Custom String("Wattson"));
			disabled Else If(Event Player.ChosenLegend == Custom String("Crypto"));
			disabled Else If(Event Player.ChosenLegend == Custom String("Revenant"));
			disabled Else If(Event Player.ChosenLegend == Custom String("Loba"));
		Else If(Event Player.ChosenLegend == Custom String("Youngsmith"));
			Event Player.AbilityCooldown = Global.YoungsmithAbility;
	}
}

disabled rule("Legend Info in Spawn room")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Destroy All HUD Text;
		Wait(0.010, Ignore Condition);
		Call Subroutine(LegendInfoHUD);
	}
}

disabled rule("Legend Info in Spawn room")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == False;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Destroy All HUD Text;
		Wait(0.010, Ignore Condition);
		Call Subroutine(HUD);
	}
}

disabled rule("Legend Info in Spawn room")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == False;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Destroy All HUD Text;
		Wait(0.010, Ignore Condition);
		Call Subroutine(HUD);
	}
}

rule("Information HUD")
{
	event
	{
		Subroutine;
		LegendInfoHUD;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Legend: {0}\r\n\r\n\r\n\r\n{1}\r\n{2}\r\n\r\n\r\n ", Event Player.ChosenLegend,
			Custom String("{0}\r\n{1}\r\n{2}", Custom String("{2} Ability: {0} - {1} second cooldown", String("{0} {1}",
			Event Player.AbilityIcon, Event Player.LegendAbilityName), Event Player.AbilityCooldown, Input Binding String(Button(
			Ability 2))), Custom String("{2} Ultimate: {0} {1}", Event Player.UltIcon, Event Player.LegendUltName, Input Binding String(
			Button(Ultimate))), Custom String("Passive: {0}", Event Player.LegendPassiveName))), Null, Null, Top, 0, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("If Using Ults Keep Ult Charge to 0")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.UsingUlt == True;
	}

	actions
	{
		Wait(0.016, Abort When False);
		Set Ultimate Charge(Event Player, 0);
		Loop If Condition Is True;
	}
}

rule("HUD")
{
	event
	{
		Subroutine;
		HUD;
	}

	actions
	{
		Disable Messages(Event Player);
		Create HUD Text(Event Player, Global.ObjectiveHud, Current Game Mode == Game Mode(Capture the Flag)
			? Global.ObjectiveAlternative : String(""), Null, Left, 0, Color(Red), Color(Red), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player, Null, Custom String(
			" \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"),
			Null, Left, 3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Wait(0.250, Ignore Condition);
		If(Is Dummy Bot(Event Player) == False);
			Create HUD Text(Remove From Array(All Players(Team Of(Event Player)), Event Player), Null, Custom String("{0} {1}% {2}", String(
				"{0} {1}", Event Player.ChosenLegend, Event Player), Normalized Health(Event Player) * 100, Ability Icon String(Hero Of(
				Event Player), Button(Primary Fire))), Null, Left, 5, Color(Red), Color(Red), Color(Red), Visible To and String,
				Default Visibility);
		End;
		Create Progress Bar HUD Text(Event Player, Health Of Type(Event Player, Health) / Max Health Of Type(Event Player, Health) * 100,
			Null, Left, 7, Color(Red), Color(Red), Visible To Values and Color, Default Visibility);
		Create Progress Bar HUD Text(Event Player, (Health Of Type(Event Player, Armor) + Health Of Type(Event Player, Shields)) / (
			Max Health Of Type(Event Player, Armor) + Max Health Of Type(Event Player, Shields)) * 100, Null, Left, 7, Color(Blue), Color(
			Blue), Visible To Values and Color, Default Visibility);
		Create HUD Text(Event Player, Global.ReplaceAbility1WithSprint == True ? Custom String("{0} - {1}", Ability Icon String(Hero Of(
			Event Player), Button(Primary Fire)), Event Player.MaxAmmo == 0 ? Icon String(Question Mark) : Custom String("{0}/{1}",
			Event Player.Ammo, Event Player.MaxAmmo)) : Custom String("{0} - {1} - {2}", Ability Icon String(Hero Of(Event Player), Button(
			Primary Fire)), Event Player.MaxAmmo == 0 ? Icon String(Question Mark) : Custom String("{0}/{1}", Event Player.Ammo,
			Event Player.MaxAmmo), Custom String("{0} {1}", Ability Icon String(Hero Of(Event Player), Button(Ability 1)), Is True For Any(
			Array(Hero(Symmetra), Hero(Tracer), Hero(Junkrat)), Hero Of(Event Player) == Current Array Element) ? Ability Charge(
			Event Player, Button(Ability 1)) : (Ability Cooldown(Event Player, Button(Ability 1)) == 0 ? Input Binding String(Button(
			Ability 1)) : Ability Cooldown(Event Player, Button(Ability 1))))), Null, Null, Left, 6, Color(Red), Color(Red), Color(Red),
			Visible To and String, Default Visibility);
		disabled Create HUD Text(Event Player, Custom String("{1}\r\n{2}", Null, Event Player.PlayerArmor, Event Player.PlayerHealth), Null, Null,
			Left, 7, Color(Red), Color(Red), Color(Red), Visible To and String, Default Visibility);
		disabled Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String(
			" \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n "),
			Null, Left, 8, Color(White), Color(White), Color(White), None, Default Visibility);
		"If Game HUD is disabled"
		Create HUD Text(Event Player, Null, Custom String(" \r\n \r\n "), Custom String(
			" \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{0}\r\n{1}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
			Global.EnableApexCrosshair == True ? Custom String("") : Icon String(Plus), Event Player.Damage > 0 ? Custom String("{0}",
			Round To Integer(Event Player.Damage, To Nearest)) : Custom String("")), Top, 1, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("{0}", Global.UltimateGenerationType == True ? (
			Event Player.UltimateGen >= 100 ? Event Player.UltIcon : Custom String("{0}%", Round To Integer(Event Player.UltimateGen,
			To Nearest))) : (Ultimate Charge Percent(Event Player) >= 100 ? Event Player.UltIcon : Custom String("{0}%",
			Ultimate Charge Percent(Event Player)))), Null, Null, Top, 2, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player, Custom String("{1}", Null, Ultimate Charge Percent(Event Player) == 100 ? Input Binding String(
			Button(Ultimate)) : Icon String(No)), Custom String(""), Custom String(""), Top, 3, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("{0}", Custom String("{0}",
			Event Player.UsedAbility == False ? Event Player.AbilityIcon : Event Player.AbilityCooldown)), Custom String(
			"                                                                                                                             {0}",
			String("")), Custom String(""), Top, 4, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("{0}", Custom String("{0}", Event Player.UsedAbility == False ? (Input Binding String(
			Button(Ability 2)) == Null ? Custom String("Unbound") : Input Binding String(Button(Ability 2))) : Icon String(No))),
			Custom String(
			"                                                                                                                             {0}",
			String("")), Custom String(""), Top, 5, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait(5, Ignore Condition);
		Enable Messages(Event Player);
		Create HUD Text(Event Player, Custom String("{0}|{1}|{2}", Custom String("{0}{1}",
			Global.KillLeader == Event Player ? Ability Icon String(Hero(Cassidy), Button(Ultimate)) : Icon String(Skull), Player Stat(
			Event Player, Final Blows)), Custom String("{0}{1}", Icon String(Bolt), Player Stat(Event Player, Eliminations) - Player Stat(
			Event Player, Final Blows)), Custom String("{0}{1}", Icon String(Poison), Round To Integer(Player Stat(Event Player,
			All Damage Dealt), To Nearest))), Null, Null, Right, -1, Color(Red), Color(Red), Color(Red), Visible To Sort Order and String,
			Default Visibility);
		Create HUD Text(Global.KillLeader == Event Player ? Event Player : Null, Custom String("{0} You are the kill leader! {0}",
			Icon String(Exclamation Mark)), Null, Null, Right, -2, Color(Orange), Color(Orange), Color(Orange), Visible To and String,
			Default Visibility);
	}
}

rule("Skip Assempling Heroes")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("Health bar changes ‚ñ†‚ñ°")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		If(Normalized Health(Event Player) == 1);
			Event Player.PlayerHealth = Custom String("‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†");
		Else If(Normalized Health(Event Player) < 1 && Normalized Health(Event Player) >= 0.900);
			Event Player.PlayerHealth = Custom String("‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°");
		Else If(Normalized Health(Event Player) < 0.900 && Normalized Health(Event Player) >= 0.800);
			Event Player.PlayerHealth = Custom String("‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°");
		Else If(Normalized Health(Event Player) < 0.800 && Normalized Health(Event Player) >= 0.700);
			Event Player.PlayerHealth = Custom String("‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°");
		Else If(Normalized Health(Event Player) < 0.700 && Normalized Health(Event Player) >= 0.600);
			Event Player.PlayerHealth = Custom String("‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°");
		Else If(Normalized Health(Event Player) < 0.600 && Normalized Health(Event Player) >= 0.500);
			Event Player.PlayerHealth = Custom String("‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°");
		Else If(Normalized Health(Event Player) < 0.500 && Normalized Health(Event Player) >= 0.400);
			Event Player.PlayerHealth = Custom String("‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°");
		Else If(Normalized Health(Event Player) < 0.400 && Normalized Health(Event Player) >= 0.300);
			Event Player.PlayerHealth = Custom String("‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°");
		Else If(Normalized Health(Event Player) < 0.300 && Normalized Health(Event Player) >= 0.200);
			Event Player.PlayerHealth = Custom String("‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°");
		Else If(Normalized Health(Event Player) < 0.200 && Normalized Health(Event Player) >= 0.100);
			Event Player.PlayerHealth = Custom String("‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°");
		Else If(Normalized Health(Event Player) < 0.100 && Normalized Health(Event Player) >= 0);
			Event Player.PlayerHealth = Custom String("‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°");
		End;
		If(Health Of Type(Event Player, Shields) == 100);
			Event Player.PlayerArmor = Custom String("‚ñ† ‚ñ† ‚ñ† ‚ñ† ‚ñ†");
		Else If(Health Of Type(Event Player, Shields) < 100 && Health Of Type(Event Player, Shields) >= 80);
			Event Player.PlayerArmor = Custom String("‚ñ† ‚ñ† ‚ñ† ‚ñ† ‚ñ°");
		Else If(Health Of Type(Event Player, Shields) < 80 && Health Of Type(Event Player, Shields) >= 60);
			Event Player.PlayerArmor = Custom String("‚ñ† ‚ñ† ‚ñ† ‚ñ° ‚ñ°");
		Else If(Health Of Type(Event Player, Shields) < 60 && Health Of Type(Event Player, Shields) >= 40);
			Event Player.PlayerArmor = Custom String("‚ñ† ‚ñ† ‚ñ° ‚ñ° ‚ñ°");
		Else If(Health Of Type(Event Player, Shields) < 40 && Health Of Type(Event Player, Shields) >= 20);
			Event Player.PlayerArmor = Custom String("‚ñ† ‚ñ° ‚ñ° ‚ñ° ‚ñ°");
		Else If(Health Of Type(Event Player, Shields) < 20 && Health Of Type(Event Player, Shields) >= 0);
			Event Player.PlayerArmor = Custom String("‚ñ° ‚ñ° ‚ñ° ‚ñ° ‚ñ°");
		End;
		Loop;
	}
}

rule("Ultimate Icon Change")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		If(Ultimate Charge Percent(Event Player) == 100);
			Event Player.UltimateIcon = Button(Ultimate);
		Else;
			Event Player.UltimateIcon = Icon String(No);
		End;
		Loop;
	}
}

rule("Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	actions
	{
		Event Player.Damage += Event Damage;
	}
}

rule("Damage World Text")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Damage >= 0;
	}

	actions
	{
		disabled Destroy In-World Text(Last Text ID);
		disabled Create In-World Text(Event Player, Event Player.PortalLocations, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 1, Event Player, All Players(All Teams), True), 1, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Wait(2, Restart When True);
		disabled Destroy In-World Text(Last Text ID);
		Event Player.Damage = 0;
	}
}

rule("BLOODHOUND ABILITIES")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Bloodhound Sonar")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Bloodhound");
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.UsedAbility == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.AbilityActive = True;
		Event Player.SonarLocations = Empty Array;
		Event Player.UsedAbility = True;
		Event Player.SonarAbility = Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 45);
		Event Player.SonarFiltered = Filtered Array(Event Player.SonarAbility, Distance Between(Eye Position(Event Player),
			Current Array Element) <= 100);
		Big Message(Event Player, Custom String("{0} enemies located!", Count Of(Event Player.SonarFiltered)));
		For Player Variable(Event Player, Array_I, 0, Count Of(Event Player.SonarFiltered), 1);
			Create Icon(All Players(Team Of(Event Player)), Event Player.SonarFiltered[Event Player.Array_I], Warning, None, Color(Red), True);
			Modify Player Variable(Event Player, SonarLocations, Append To Array, Last Created Entity);
		End;
		Wait(3, Ignore Condition);
		While(Event Player.SonarLocations != Empty Array);
			Destroy Icon(First Of(Event Player.SonarLocations));
			Modify Player Variable(Event Player, SonarLocations, Remove From Array By Index, False);
		End;
		Event Player.AbilityActive = False;
		If(Event Player.UltActive == True);
			Event Player.AbilityCooldown = 5;
			Wait(5, Ignore Condition);
		Else;
			Wait(Global.zBloodhoundAbility, Ignore Condition);
		End;
		Event Player.UsedAbility = False;
	}
}

rule("Bloodhound Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Bloodhound");
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.UsingUlt == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Start Forcing Player Outlines(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, True, Color(Red), Default);
		Event Player.UltTimer = 15;
		Event Player.UsingUlt = True;
		Set Ultimate Charge(Event Player, 0);
		Create Effect(Event Player, Sphere, Color(White), Event Player, 3, Visible To Position and Radius);
		Event Player.BombardmentLastCreated = Last Created Entity;
		Set Damage Dealt(Event Player, 150);
		Set Move Speed(Event Player, 200);
		Wait(15, Ignore Condition);
		Event Player.UsingUlt = False;
		Set Move Speed(Event Player, 100);
		Set Damage Dealt(Event Player, 100);
		Destroy Effect(Event Player.BombardmentLastCreated);
		Start Forcing Player Outlines(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, False, Color(Red), Default);
		If(Global.UltimateGenerationType == True);
			Event Player.UltimateGen = 0;
		End;
	}
}

rule("Bloodhound Ult timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Bloodhound");
		Event Player.UsingUlt == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Event Player.UltTimer -= 1;
		Loop If Condition Is True;
	}
}

rule("WRAITH ABILITIES")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Wraith Phase")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Wraith");
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.UsedAbility == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.AbilityActive = True;
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Event Player.UsedAbility = True;
		Wait(1.250, Ignore Condition);
		Create Effect(All Players(All Teams), Sparkles, Color(White), Event Player, 1, Visible To Position and Radius);
		Event Player.LastEffectPhase = Last Created Entity;
		Create Effect(Event Player, Sphere, Color(White), Event Player, 1, Visible To Position and Radius);
		Set Status(Event Player, Null, Phased Out, 9999);
		Set Move Speed(Event Player, 130);
		Set Invisible(Event Player, All);
		Wait(4, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Set Move Speed(Event Player, 100);
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Set Invisible(Event Player, None);
		Clear Status(Event Player, Phased Out);
		Destroy Effect(Event Player.LastEffectPhase);
		Event Player.AbilityActive = False;
		Wait(Global.WraithAbility, Ignore Condition);
		Event Player.UsedAbility = False;
	}
}

rule("Wraith Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Wraith");
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.UsingUlt == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.PortalLocations = Empty Array;
		Event Player.UltTimer = 15;
		Event Player.UsingUlt = True;
		Modify Player Variable(Event Player, PortalLocations, Append To Array, Position Of(Event Player));
		Create Effect(All Players(All Teams), Ring, Color(Purple), Position Of(Event Player), 1, None);
		Modify Player Variable(Event Player, PortalOrb, Append To Array, Last Created Entity);
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		If(Global.UltimateGenerationType == True);
			Event Player.UltimateGen = 0;
		End;
	}
}

rule("Wraith Ult Timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Wraith");
		Event Player.UsingUlt == True;
		Event Player.UltTimer > 0;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Event Player.UltTimer -= 1;
		Loop If Condition Is True;
	}
}

disabled rule("Wraith Phase Constantly Set Pos")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Wraith");
		Has Status(Event Player, Phased Out) == True;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Create Effect(All Players(All Teams), Sparkles, Color(White), Event Player, 2, Visible To Position and Radius);
		Loop If Condition Is True;
	}
}

rule("Wraith Place end portal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Wraith");
		Event Player.UsingUlt == True;
		Event Player.UltTimer > 0;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Count Of(Event Player.PortalLocations) != 2;
	}

	actions
	{
		Modify Player Variable(Event Player, PortalLocations, Append To Array, Position Of(Event Player));
		Create Effect(All Players(All Teams), Ring, Color(Purple), Position Of(Event Player), 1, None);
		Modify Player Variable(Event Player, PortalOrb, Append To Array, Last Created Entity);
		Event Player.UltTimer = 999;
		Wait(0.250, Ignore Condition);
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Wait(Global.DimensionalRiftDuration, Ignore Condition);
		While(Event Player.PortalLocations != Empty Array);
			Destroy Effect(First Of(Event Player.PortalLocations));
			Modify Player Variable(Event Player, PortalLocations, Remove From Array By Index, False);
		End;
		While(Event Player.PortalOrb != Empty Array);
			Destroy Effect(First Of(Event Player.PortalOrb));
			Modify Player Variable(Event Player, PortalOrb, Remove From Array By Index, False);
		End;
		Event Player.UsingUlt = False;
		Press Button(Event Player, Button(Primary Fire));
		Press Button(Event Player, Button(Ultimate));
	}
}

rule("Wraith Teleporter")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Count Of(Event Player.PortalLocations) == 2;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Interact));
		If(Distance Between(Position Of(Event Player), Event Player.PortalLocations[0]) <= 3);
			Teleport(Event Player, Event Player.PortalLocations[1]);
		Else If(Distance Between(Position Of(Event Player), Event Player.PortalLocations[1]) <= 3);
			Teleport(Event Player, Event Player.PortalLocations[0]);
		End;
		Wait(1, Ignore Condition);
		Allow Button(Event Player, Button(Interact));
	}
}

rule("Wraith Ult time runs out")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Wraith");
		Event Player.UsingUlt == True;
		Event Player.UltTimer <= 0;
		Count Of(Event Player.PortalLocations) != 2;
	}

	actions
	{
		Modify Player Variable(Event Player, PortalLocations, Append To Array, Position Of(Event Player));
		Create Effect(All Players(All Teams), Ring, Color(Purple), Position Of(Event Player), 1, None);
		Modify Player Variable(Event Player, PortalOrb, Append To Array, Last Created Entity);
		Event Player.UltTimer = 0;
		Wait(0.250, Ignore Condition);
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Wait(Global.DimensionalRiftDuration, Ignore Condition);
		While(Event Player.PortalLocations != Empty Array);
			Destroy Effect(First Of(Event Player.PortalLocations));
			Modify Player Variable(Event Player, PortalLocations, Remove From Array By Index, False);
		End;
		While(Event Player.PortalOrb != Empty Array);
			Destroy Effect(First Of(Event Player.PortalOrb));
			Modify Player Variable(Event Player, PortalOrb, Remove From Array By Index, False);
		End;
		Event Player.UsingUlt = False;
	}
}

rule("GILBRALTAR ABILITIES")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Gibraltar Dome Shield")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Gibraltar");
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.UsedAbility == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.AbilityActive = True;
		Event Player.UsedAbility = True;
		Event Player.AbilityLocation = Position Of(Event Player);
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player.AbilityLocation, 6, None);
		Wait(12, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Event Player.AbilityLocation = 0;
		Event Player.AbilityActive = False;
		Wait(Global.GibraltarAbility, Ignore Condition);
		Event Player.UsedAbility = False;
	}
}

rule("Gibraltar Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Gibraltar");
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.UsingUlt == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.UsingUlt = True;
		Event Player.BombardmentLocation = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 30, All Players(All Teams), Event Player, True);
		Create Effect(All Players(All Teams), Sphere, Color(Orange), Event Player.BombardmentLocation, 15, Visible To Position and Radius);
		Event Player.BombardmentLastCreated = Last Created Entity;
		Wait(3, Ignore Condition);
		Destroy Effect(Event Player.BombardmentLastCreated);
		Create Effect(All Players(All Teams), Light Shaft, Color(Red), Vector(X Component Of(Event Player.BombardmentLocation),
			Y Component Of(Event Player.BombardmentLocation - 5), Z Component Of(Event Player.BombardmentLocation)), 15,
			Visible To Position and Radius);
		Event Player.BombardmentLastCreated = Last Created Entity;
		Event Player.AbilityActive = True;
		Wait(6, Ignore Condition);
		Event Player.AbilityActive = False;
		Destroy Effect(Event Player.BombardmentLastCreated);
		Event Player.UsingUlt = False;
		Press Button(Event Player, Button(Ultimate));
		If(Global.UltimateGenerationType == True);
			Event Player.UltimateGen = 0;
		End;
	}
}

rule("Gibraltar Ult - Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.AbilityActive == True;
		Event Player.UsingUlt == True;
		Event Player.ChosenLegend == Custom String("Gibraltar");
	}

	actions
	{
		Wait(0.250, Abort When False);
		Damage(Players Within Radius(Event Player.BombardmentLocation, 15, Opposite Team Of(Team Of(Event Player)), Off), Event Player,
			50);
		If(Distance Between(Position Of(Event Player), Event Player.BombardmentLocation) <= 15);
			Damage(Event Player, Event Player, 50);
		End;
		Loop If Condition Is True;
	}
}

rule("Gilbraltar Dome Modification")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Gibraltar");
		Event Player.AbilityActive == True;
	}

	actions
	{
		Start Damage Modification(Players Within Radius(Event Player.AbilityLocation, 6, All Teams, Off), All Players(All Teams), 0,
			Receivers Damagers and Damage Percent);
		Wait(0.250, Abort When False);
		disabled Heal(Players Within Radius(Event Player.AbilityLocation, 3, All Teams, Off), Event Player, 20);
		Stop Damage Modification(Last Damage Modification ID);
		Loop If Condition Is True;
	}
}

rule("LIFELINE ABILITIES")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Lifeline Health Drone")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Lifeline");
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.UsedAbility == False;
		Event Player.AbilityActive == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.UsedAbility = True;
		Event Player.AbilityActive = True;
		Create Effect(All Players(All Teams), Sphere, Color(Turquoise), Position Of(Event Player), 3, None);
		Event Player.LastEffectPhase = Last Created Entity;
		Wait(Global.DOCDuration, Ignore Condition);
		Event Player.AbilityActive = False;
		Destroy Effect(Event Player.LastEffectPhase);
		Wait(Global.LifelineAbility, Ignore Condition);
		Event Player.UsedAbility = False;
	}
}

rule("Lifeline Passive Revive")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Lifeline");
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.UsingPassive == False;
		Event Player.PassiveActive == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.UsingPassive = True;
		Event Player.PassiveActive = True;
		Event Player.PassiveLocation = Position Of(Event Player);
		Create Effect(All Players(All Teams), Orb, Color(Turquoise), Event Player.GrappleEndpoint, 3, None);
		Wait(3, Ignore Condition);
		Event Player.PassiveActive = False;
		Destroy Effect(Last Created Entity);
		Resurrect(Players Within Radius(Event Player.PassiveLocation, 3, Team Of(Event Player), Off));
		Wait(Global.LifelinePassive, Ignore Condition);
		Event Player.UsingPassive = False;
	}
}

rule("Lifeline Health Drone - Heal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Lifeline");
		Event Player.AbilityActive == True;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Heal(Players Within Radius(Event Player.AbilityLocation, 3, All Teams, Off), Event Player, 20);
		Loop If Condition Is True;
	}
}

rule("Lifeline Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Lifeline");
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.UsingUlt == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.UsingUlt = True;
		Wait(1, Ignore Condition);
		Chase Player Variable Over Time(Event Player, RangeChange, 20, 5, Destination and Duration);
		Create Effect(All Players(All Teams), Sphere, Color(White), Event Player, Event Player.RangeChange,
			Visible To Position and Radius);
		Event Player.BombardmentLastCreated = Last Created Entity;
		Heal(All Players(Team Of(Event Player)), Event Player, 10000);
		Press Button(Event Player, Button(Primary Fire));
		Wait(5, Ignore Condition);
		Destroy Effect(Event Player.BombardmentLastCreated);
		Event Player.RangeChange = 0;
		Event Player.UsingUlt = False;
		If(Global.UltimateGenerationType == True);
			Event Player.UltimateGen = 0;
		End;
	}
}

rule("BANGALORE Abilities")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Bangalore Smoke")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Bangalore");
		Is Button Held(Event Player, Button(Ability 2)) == True;
		disabled Event Player.UsedAbility == False;
		disabled Count Of(Event Player.SmokeLocations) < 3;
		Event Player.AbilityActive == False;
		disabled Event Player.SmokeEffects != 3;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.AbilityActive = True;
		Event Player.UsedAbility = True;
		Damage(Players Within Radius(Position Of(Event Player), 5, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 10);
		Event Player.SmokeLocations = Eye Position(Event Player);
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player.SmokeLocations, 5, None);
		Modify Player Variable(Event Player, SmokeEffects, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player.SmokeLocations, 5, None);
		Modify Player Variable(Event Player, SmokeEffects, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player.SmokeLocations, 5, None);
		Modify Player Variable(Event Player, SmokeEffects, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player.SmokeLocations, 5, None);
		Modify Player Variable(Event Player, SmokeEffects, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player.SmokeLocations, 5, None);
		Modify Player Variable(Event Player, SmokeEffects, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player.SmokeLocations, 5, None);
		Modify Player Variable(Event Player, SmokeEffects, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player.SmokeLocations, 5, None);
		Modify Player Variable(Event Player, SmokeEffects, Append To Array, Last Created Entity);
		Wait(Global.BangaloreSmokeDuration, Ignore Condition);
		While(Event Player.SmokeEffects != Empty Array);
			Destroy Effect(First Of(Event Player.SmokeEffects));
			Modify Player Variable(Event Player, SmokeEffects, Remove From Array By Index, False);
		End;
		Event Player.AbilityActive = False;
		Event Player.SmokeLocations = 9999;
		Destroy Effect(Event Player.SmokeEffects);
		Wait(Global.BangaloreAbility, Ignore Condition);
		Event Player.UsedAbility = False;
	}
}

rule("Bangalore Smoke Effects")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Bangalore");
		Event Player.AbilityActive == True;
	}

	actions
	{
		Wait(0.800, Ignore Condition);
		Play Effect(Players Within Radius(Event Player.SmokeLocations, 5, All Teams, Off), Bad Explosion, Color(White),
			Event Player.SmokeLocations, 5);
		Loop;
	}
}

rule("Bangalore Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Bangalore");
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.UsingUlt == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.UsingUlt = True;
		Event Player.BombardmentLocation = Position Of(Event Player);
		Create Effect(All Players(All Teams), Sphere, Color(Orange), Event Player.BombardmentLocation, 15, Visible To Position and Radius);
		Event Player.BombardmentLastCreated = Last Created Entity;
		Destroy Effect(Event Player.BombardmentLastCreated);
		Wait(3, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Light Shaft, Color(Orange), Vector(X Component Of(Event Player.BombardmentLocation),
			Y Component Of(Event Player.BombardmentLocation - 5), Z Component Of(Event Player.BombardmentLocation)), 15,
			Visible To Position and Radius);
		Event Player.UltActive = True;
		Wait(6, Ignore Condition);
		Event Player.UltActive = False;
		Destroy Effect(Last Created Entity);
		Event Player.UsingUlt = False;
		Press Button(Event Player, Button(Ultimate));
		If(Global.UltimateGenerationType == True);
			Event Player.UltimateGen = 0;
		End;
	}
}

rule("Bangalore Ult - Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.UltActive == True;
		Event Player.UsingUlt == True;
		Event Player.ChosenLegend == Custom String("Bangalore");
	}

	actions
	{
		Wait(0.250, Abort When False);
		Start Damage Over Time(Players Within Radius(Event Player.BombardmentLocation, 15, Opposite Team Of(Team Of(Event Player)), Off),
			Event Player, 2, 8);
		Set Status(Players Within Radius(Event Player.BombardmentLocation, 15, Opposite Team Of(Team Of(Event Player)), Off), Event Player,
			Burning, 1);
		If(Distance Between(Position Of(Event Player), Event Player.BombardmentLocation) <= 15);
			Start Damage Over Time(Event Player, Event Player, 2, 8);
			Set Status(Event Player, Event Player, Burning, 1);
		End;
		Loop If Condition Is True;
	}
}

rule("Bangalore Passive")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Bangalore");
		Event Player.PassiveActive == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.PassiveActive = True;
		Set Move Speed(Event Player, 150);
		Set Damage Received(Event Player, 75);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
		Set Damage Received(Event Player, 100);
		Wait(Global.BangalorePassive, Ignore Condition);
		Event Player.PassiveActive = False;
	}
}

rule("PATHFINDER ABILITIES")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Grappling hook")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Event Player.ChosenLegend == Custom String("Pathfinder");
		Event Player.UsedAbility == False;
	}

	actions
	{
		Global.GrappleRange = 25;
		Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 30);
		Event Player.GrappleTarget = Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * Global.GrappleRange, All Players(All Teams), Filtered Array(All Players(All Teams),
			!Current Array Element.IsGrappleable), False);
		If(Entity Exists(Event Player.GrappleTarget));
			Event Player.GrappleOffset = Local Vector Of(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
				+ Facing Direction Of(Event Player) * Global.GrappleRange, All Players(All Teams), Filtered Array(All Players(All Teams),
				!Current Array Element.IsGrappleable), False), Event Player.GrappleTarget, Rotation And Translation);
		Else;
			Event Player.GrappleTarget = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
				Event Player) * Global.GrappleRange, Null, Event Player, False);
			Event Player.GrappleOffset = Vector(0, 0, 0);
		End;
		Event Player.GrappleEndpoint = Eye Position(Event Player) + Down * 0.500;
		Create Beam Effect(All Players(All Teams), Grapple Beam, Event Player, Event Player.GrappleEndpoint, Color(White),
			Visible To Position and Radius);
		Event Player.GrappleBeam = Last Created Entity;
		If(!Entity Exists(Event Player.GrappleTarget) && Distance Between(Eye Position(Event Player), Event Player.GrappleTarget)
			>= Global.GrappleRange);
			Chase Player Variable At Rate(Event Player, GrappleEndpoint, Event Player.GrappleTarget, 150, Destination and Rate);
			Wait(Global.GrappleRange / 150, Ignore Condition);
			Chase Player Variable At Rate(Event Player, GrappleEndpoint, Eye Position(Event Player) + Down * 0.500, 150, Destination and Rate);
			Wait(Global.GrappleRange / 150, Ignore Condition);
			Destroy Effect(Event Player.GrappleBeam);
		Else;
			Event Player.AbilityActive = True;
			Event Player.UsedAbility = True;
			Chase Player Variable At Rate(Event Player, GrappleEndpoint, Entity Exists(Event Player.GrappleTarget) ? World Vector Of(
				Event Player.GrappleOffset, Event Player.GrappleTarget, Rotation And Translation) : Event Player.GrappleTarget, 150,
				Destination and Rate);
			disabled Press Button(Event Player, Button(Interact));
			Wait(Distance Between(Event Player, Event Player.GrappleTarget) / 150, Ignore Condition);
			Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 50);
			Start Accelerating(Event Player, Up, 10, 60, To World, Direction Rate and Max Speed);
			While(!Is Button Held(Event Player, Button(Interact)) && Is Alive(Event Player) && Is In View Angle(Event Player,
				Event Player.GrappleEndpoint, 90) && !Is Button Held(Event Player, Button(Crouch)) && Distance Between(Event Player,
				Event Player.GrappleEndpoint) <= 35 && !(False && (Is Firing Primary(Event Player) || Is Firing Secondary(Event Player)
				|| Is Using Ability 1(Event Player) || Is Using Ability 2(Event Player) || Is Using Ultimate(Event Player))) && !(Has Status(
				Event Player, Hacked) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Asleep) || Has Status(Event Player,
				Frozen) || Has Status(Event Player, Hacked) || Has Status(Event Player, Stunned)) && True);
				Apply Impulse(Event Player, Direction Towards(Event Player, Event Player.GrappleEndpoint), 1, To World,
					Incorporate Contrary Motion);
				Apply Impulse(Event Player, Facing Direction Of(Event Player) + World Vector Of(Left, Event Player, Rotation) * X Component Of(
					Throttle Of(Event Player)), 1, To World, Incorporate Contrary Motion);
				Wait(0.048, Ignore Condition);
			End;
			Stop Accelerating(Event Player);
			Chase Player Variable At Rate(Event Player, GrappleEndpoint, Eye Position(Event Player) + Down * 0.500, 150, Destination and Rate);
			Wait(Distance Between(Event Player, Event Player.GrappleTarget) / 150, Ignore Condition);
			Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 30);
			Event Player.AbilityActive = False;
			Destroy Effect(Event Player.GrappleBeam);
			Wait(35, Ignore Condition);
			Skip If(!True, 1);
			disabled Small Message(Event Player, Custom String("{0} grapple ready", Ability Icon String(Hero(Wrecking Ball), Button(Secondary Fire))));
			Event Player.UsedAbility = False;
		End;
	}
}

disabled rule("Pathfinder Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Pathfinder");
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.UsingUlt == False;
	}

	actions
	{
		Event Player.UsingUlt = True;
		disabled For Player Variable(Event Player, Array_I, 0, Count Of(Event Player.Zipline), 1);
		disabled Destroy Effect(Event Player.Array_I);
		disabled Modify Player Variable(Event Player, Zipline, Remove From Array By Index, 0);
		disabled End;
		For Player Variable(Event Player, Array_I, 0, Count Of(Event Player.ZiplineEffects), 1);
			Destroy Effect(Event Player.Array_I);
			Modify Player Variable(Event Player, ZiplineEffects, Remove From Array By Index, 0);
		End;
		For Player Variable(Event Player, Array_I, 0, Count Of(Event Player.ZiplineBeam), 1);
			Destroy Effect(Event Player.Array_I);
			Modify Player Variable(Event Player, ZiplineBeam, Remove From Array By Index, 0);
		End;
		Event Player.Zipline = Empty Array;
		Modify Player Variable(Event Player, Zipline, Append To Array, Position Of(Event Player));
		Modify Player Variable(Event Player, Zipline, Append To Array, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * Global.ZiplineMeters, All Players(All Teams), Event Player, True));
		Create Beam Effect(All Players(All Teams), Grapple Beam, Event Player.Zipline[0], Event Player.Zipline[1], Color(White),
			Visible To Position and Radius);
		Event Player.UltActive = True;
		Modify Player Variable(Event Player, ZiplineBeam, Append To Array, Last Created Entity);
		disabled Create Beam Effect(All Players(All Teams), Good Beam, Event Player.Zipline[0], Vector(X Component Of(Event Player.Zipline[0]),
			Y Component Of(Event Player.Zipline[0] + 0.500), Z Component Of(Event Player.Zipline[0])), Color(White),
			Visible To Position and Radius);
		disabled Modify Player Variable(Event Player, ZiplineBeam, Append To Array, Last Created Entity);
		Wait(3, Ignore Condition);
		Event Player.UltActive = False;
		Event Player.UsingUlt = False;
		If(Global.UltimateGenerationType == True);
			Event Player.UltimateGen = 0;
		End;
	}
}

disabled rule("Rule 57")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Ana), Opposite Team Of(Team Of(Event Player)), -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Start Holding Button(Players On Hero(Hero(Ana), All Teams), Button(Primary Fire));
	}
}

rule("Pathfinder Zipline")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Count Of(Event Player.Zipline) == 2;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Interact));
		If(Distance Between(Position Of(Event Player), Event Player.Zipline[0]) <= 3);
			Teleport(Event Player, Event Player.Zipline[1]);
		Else If(Distance Between(Position Of(Event Player), Event Player.Zipline[1]) <= 3);
			Teleport(Event Player, Event Player.Zipline[0]);
		End;
		Wait(1, Ignore Condition);
		Allow Button(Event Player, Button(Interact));
	}
}

rule("Pathfinder Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Pathfinder");
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.UsingUlt == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.UsingUlt = True;
		disabled For Player Variable(Event Player, Array_I, 0, Count Of(Event Player.Zipline), 1);
		disabled Destroy Effect(Event Player.Array_I);
		disabled Modify Player Variable(Event Player, Zipline, Remove From Array By Index, 0);
		disabled End;
		For Player Variable(Event Player, Array_I, 0, Count Of(Event Player.ZiplineEffects), 1);
			Destroy Effect(Event Player.Array_I);
			Modify Player Variable(Event Player, ZiplineEffects, Remove From Array By Index, 0);
		End;
		For Player Variable(Event Player, Array_I, 0, Count Of(Event Player.ZiplineBeam), 1);
			Destroy Effect(Event Player.Array_I);
			Modify Player Variable(Event Player, ZiplineBeam, Remove From Array By Index, 0);
		End;
		Event Player.Zipline = Empty Array;
		Modify Player Variable(Event Player, Zipline, Append To Array, Position Of(Event Player));
		Modify Player Variable(Event Player, Zipline, Append To Array, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * Global.ZiplineMeters, All Players(All Teams), Event Player, True));
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Event Player.Zipline[0]), Y Component Of(
			Event Player.Zipline[0]) + 2, Z Component Of(Event Player.Zipline[0])), Event Player.Zipline[1], Color(White),
			Visible To Position and Radius);
		Event Player.UltActive = True;
		Modify Player Variable(Event Player, ZiplineBeam, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Good Beam, Event Player.Zipline[0], Vector(X Component Of(Event Player.Zipline[0]),
			Y Component Of(Event Player.Zipline[0]) + 2, Z Component Of(Event Player.Zipline[0])), Color(White),
			Visible To Position and Radius);
		Modify Player Variable(Event Player, ZiplineBeam, Append To Array, Last Created Entity);
		Wait(3, Ignore Condition);
		Event Player.UltActive = False;
		Event Player.UsingUlt = False;
		If(Global.UltimateGenerationType == True);
			Event Player.UltimateGen = 0;
		End;
	}
}

rule("MIRAGE ABILITIES")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Mirage Decoy")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Mirage");
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.AbilityActive == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy In-World Text(Event Player.DecoyInWorldID);
		Destroy Dummy Bot(Team Of(Event Player.Decoy), Slot Of(Event Player.Decoy));
		Create Dummy Bot(Hero Of(Event Player), Team Of(Event Player), -1, Position Of(Event Player), Facing Direction Of(Event Player));
		Event Player.Decoy = Last Created Entity;
		Start Throttle In Direction(Event Player.Decoy, Facing Direction Of(Event Player), 1, To World, Replace existing throttle, None);
		Set Player Health(Event Player.Decoy, 1);
		Start Forcing Player Outlines(Event Player.Decoy, All Players(All Teams), False, Color(White), Default);
		Create In-World Text(All Players(Team Of(Event Player)), Custom String("DECOY"), Event Player.Decoy, 1, Do Not Clip,
			Visible To Position and String, Color(Turquoise), Default Visibility);
		Event Player.Decoy.DecoyInWorldID = Last Text ID;
		Start Forcing Dummy Bot Name(Last Created Entity, Event Player);
		If(Is Crouching(Event Player) == True);
			Start Holding Button(Event Player.Decoy, Button(Crouch));
		Else If(Is Jumping(Event Player) == True);
			Start Holding Button(Event Player.Decoy, Button(Jump));
		End;
		Event Player.UsedAbility = True;
		Event Player.AbilityActive = False;
		Wait(Global.MirageAbility, Ignore Condition);
		Event Player.UsedAbility = False;
		Event Player.AbilityActive = False;
	}
}

rule("Decoy Dies")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Forcing Dummy Bot Name(Event Player, Custom String("{0}'s Decoy", Event Player));
		Destroy In-World Text(Event Player.DecoyInWorldID);
		Wait(0.250, Ignore Condition);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
	}
}

rule("Mirage Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Mirage");
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.UsingUlt == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Event Player.Decoy == Null);
			Small Message(Event Player, Custom String("No Decoy was found!"));
		Else;
			If(Global.UltimateGenerationType == True);
				Event Player.UltimateGen = 0;
			End;
			Event Player.UsingUlt = True;
			Event Player.UltLocation = Position Of(Event Player);
			Event Player.UltActive = True;
			Event Player.Decoy.UltLocation = Position Of(Event Player.Decoy);
			Wait(0.250, Ignore Condition);
			Teleport(Event Player, Position Of(Event Player.Decoy));
			Teleport(Event Player.Decoy, Event Player.UltLocation);
			Set Status(Event Player.Decoy, Null, Frozen, 9999);
			Set Status(Event Player, Null, Hacked, 9999);
			Set Status(Event Player, Null, Unkillable, 9999);
			Set Status(Event Player, Null, Burning, 9999);
			Wait(15, Ignore Condition);
			Clear Status(Event Player, Hacked);
			Clear Status(Event Player, Burning);
			Clear Status(Event Player, Unkillable);
			Clear Status(Event Player.Decoy, Frozen);
			Teleport(Event Player, Event Player.UltLocation);
			Event Player.UltActive = False;
			Event Player.UsingUlt = False;
			Press Button(Event Player, Button(Ultimate));
			Teleport(Event Player.Decoy, Event Player.Decoy.UltLocation);
	}
}

rule("Mirage Passive")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Mirage");
		Event Player.PassiveActive == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Attacker == Null;
	}

	actions
	{
		Event Player.PassiveActive = True;
		Small Message(Event Player, Custom String("{0} You are invulnerable for {1} seconds!", Ability Icon String(Hero(Sombra), Button(
			Ability 1)), Global.MiragePassiveDuration));
		Wait(0.250, Ignore Condition);
		Resurrect(Event Player);
		Set Invisible(Event Player, All);
		Set Status(Event Player, Null, Invincible, 9999);
		Wait(Global.MiragePassiveDuration, Ignore Condition);
		Set Invisible(Event Player, None);
		Clear Status(Event Player, Invincible);
		Wait(Global.MiragePassive, Ignore Condition);
		Event Player.PassiveActive = False;
	}
}

rule("OCTANES ABILITIES")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Octane Regen Health")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Octane");
	}

	actions
	{
		Wait(1, Ignore Condition);
		Heal(Event Player, Null, Global.OctanePassiveHeal);
		Loop If Condition Is True;
	}
}

rule("Octane Stim")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Octane");
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.UsedAbility == False;
	}

	actions
	{
		Event Player.UsedAbility = True;
		Event Player.AbilityActive = True;
		Set Move Speed(Event Player, 150);
		Damage(Event Player, Null, 50);
		Wait(Global.OctaneAbilityLength, Ignore Condition);
		Set Move Speed(Event Player, 100);
		Event Player.AbilityActive = False;
		Wait(Global.OctaneAbility, Ignore Condition);
		Event Player.UsedAbility = False;
	}
}

rule("Octane Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Octane");
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.UsingUlt == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Global.UltimateGenerationType == True);
			Event Player.UltimateGen = 0;
		End;
		Event Player.UsingUlt = True;
		Event Player.UltActive = True;
		Set Gravity(Event Player, 20);
		Wait(30, Ignore Condition);
		Set Gravity(Event Player, 100);
		Event Player.UltActive = False;
		Event Player.UsingUlt = False;
	}
}

rule("CRYPTOS ABILITIES")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Crypto Drone")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Crypto");
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.UsedAbility == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		disabled Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
	}

	actions
	{
		Event Player.UsedAbility = True;
		Event Player.AbilityActive = True;
		If(Event Player.CryptoCamera == Empty Array);
			Event Player.CryptoCamera = Array(Eye Position(Event Player), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
				Event Player) + Facing Direction Of(Event Player) * 10, All Players(All Teams), Event Player, True));
			Small Message(Event Player, Custom String("Camera Placed"));
		Else;
			Start Camera(Event Player, Event Player.CryptoCamera[0], Event Player.CryptoCamera[1], 0);
			Wait(3, Ignore Condition);
			Stop Camera(Event Player);
		End;
		Event Player.AbilityActive = False;
		Event Player.UsedAbility = False;
		Small Message(Event Player, Event Player.CryptoCamera);
	}
}

rule("Crypto Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Crypto");
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.UsingUlt == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Global.UltimateGenerationType == True);
			Event Player.UltimateGen = 0;
		End;
		Event Player.UsingUlt = True;
		Event Player.UltActive = True;
		If(Event Player.CryptoCamera == Empty Array);
			Create Effect(All Players(All Teams), Sphere, Color(White), Position Of(Event Player), 8, Visible To Position and Radius);
			Wait(1, Ignore Condition);
			Destroy Effect(Last Created Entity);
			Set Status(Players Within Radius(Position Of(Event Player), 8, All Teams, Off), Null, Hacked, 10);
		Else;
			Create Effect(All Players(All Teams), Sphere, Color(White), Global.CryptoCamera[0], 8, Visible To Position and Radius);
			Wait(1, Ignore Condition);
			Destroy Effect(Last Created Entity);
			Set Status(Players Within Radius(Global.CryptoCamera[0], 8, All Teams, Off), Null, Hacked, 10);
		End;
		Event Player.UltActive = False;
		Event Player.UsingUlt = False;
	}
}

rule("Crypto Drone Recall")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Crypto");
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.UsedAbility == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("Recalling"));
		Wait(1, Ignore Condition);
		Event Player.CryptoCamera = Empty Array;
	}
}

rule("CAUSTIC ABILITIES")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Caustic Gas Grenade")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Caustic");
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.UsedAbility == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		disabled Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
	}

	actions
	{
		Event Player.UsedAbility = True;
		Event Player.AbilityActive = True;
		If(Event Player.CausticGasLocation == Empty Array);
			Event Player.CausticGasLocation = Position Of(Event Player);
			Small Message(Event Player, Custom String("Gas Trap Placed"));
			Create Effect(All Players(All Teams), Ring, Color(Green), Event Player.CausticGasLocation, 1, Visible To Position and Radius);
			Event Player.GasTrapEffect = Last Created Entity;
		Else;
			Destroy Effect(Event Player.GasTrapEffect);
			Event Player.CausticGasLocation = Empty Array;
			Wait(0.250, Ignore Condition);
			Event Player.CausticGasLocation = Position Of(Event Player);
			Small Message(Event Player, Custom String("Gas Trap Placed"));
			Create Effect(All Players(All Teams), Ring, Color(Green), Event Player.CausticGasLocation, 1, Visible To Position and Radius);
			Event Player.GasTrapEffect = Last Created Entity;
		End;
		Event Player.AbilityActive = False;
		Wait(Global.CausticAbility, Ignore Condition);
		Event Player.UsedAbility = False;
	}
}

rule("Caustic Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Caustic");
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.UsingUlt == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Global.UltimateGenerationType == True);
			Event Player.UltimateGen = 0;
		End;
		Event Player.UsingUlt = True;
		Wait(0.250, Ignore Condition);
		Event Player.UltActive = True;
		Event Player.CausticUltimateLocation = Vector(X Component Of(Position Of(Event Player)), Y Component Of(Position Of(Event Player))
			+ 1, Z Component Of(Position Of(Event Player)));
		Create Effect(All Players(All Teams), Cloud, Color(Green), Event Player.CausticUltimateLocation, Global.CausticUltRadius,
			Visible To Position and Radius);
		Event Player.CausticUltEffect = Last Created Entity;
		Wait(10, Ignore Condition);
		Destroy Effect(Event Player.CausticUltEffect);
		Event Player.UltActive = False;
		Event Player.UsingUlt = False;
	}
}

rule("Caustic Gas Trap Trigger")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.CausticGasLocation != 0;
		Players Within Radius(Event Player.CausticGasLocation, Global.TrapRadius, Opposite Team Of(Team Of(Event Player)), Off) == True;
	}

	actions
	{
		Start Damage Over Time(Players Within Radius(Event Player.CausticGasLocation, Global.TrapRadius, Opposite Team Of(Team Of(
			Event Player)), Off), Event Player, 10, 20);
		Wait(0.250, Ignore Condition);
		Event Player.CausticGasLocation = 0;
	}
}

rule("Caustic Ult Effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.CausticUltimateLocation != 0;
		Players Within Radius(Event Player.CausticUltimateLocation, Global.CausticUltRadius, Opposite Team Of(Team Of(Event Player)), Off)
			== True;
		Event Player.UltActive == True;
	}

	actions
	{
		Start Damage Over Time(Players Within Radius(Event Player.CausticUltimateLocation, Global.CausticUltRadius, Opposite Team Of(
			Team Of(Event Player)), Off), Event Player, 10, Global.CausticUltDamage);
	}
}

rule("Crosshair")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EnableApexCrosshair == True;
	}

	actions
	{
		Create In-World Text(Is Communicating Any Emote(Event Player) == False && Is Game In Progress == True ? Event Player : Null,
			Icon String(Plus), Update Every Frame(Eye Position(Event Player) + 100 * (0 * World Vector Of(Right, Event Player, Rotation)
			+ (0 - 0.150) * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)),
			Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90) + 3 * Facing Direction Of(Event Player))), 2,
			Do Not Clip, Visible To Position String and Color, Color(White), Default Visibility);
	}
}

rule("Overtime Barrier")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Match Time == 0;
		Is Control Mode Point Locked == False;
		Global.EnableSuddendeath == True;
		Current Game Mode != Game Mode(Control);
	}

	actions
	{
		Create Effect(All Players(All Teams), Light Shaft, Color(Red), Objective Position(Objective Index), Global.BarrierRange,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Light Shaft, Color(Red), Vector(X Component Of(Objective Position(Objective Index)),
			Y Component Of(Objective Position(Objective Index)) + 25, Z Component Of(Objective Position(Objective Index))),
			Global.BarrierRange, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Light Shaft, Color(Red), Vector(X Component Of(Objective Position(Objective Index)),
			Objective Position(Objective Index) - 25, Z Component Of(Objective Position(Objective Index))), Global.BarrierRange,
			Visible To Position and Radius);
		Disable Built-In Game Mode Completion;
		Disable Built-In Game Mode Respawning(All Players(All Teams));
		Global.OvertimeEnabled = True;
		Call Subroutine(StartBarrierShrink);
	}
}

rule("Shrink Barrier")
{
	event
	{
		Subroutine;
		StartBarrierShrink;
	}

	actions
	{
		Wait(0.150, Ignore Condition);
		If(Global.BarrierRange > 5);
			Global.BarrierRange -= 0.250;
			Loop If Condition Is True;
	}
}

rule("Outside Barrier")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Distance Between(Event Player, Objective Position(Objective Index)) >= Global.BarrierRange;
		Distance Between(Position Of(Event Player), Objective Position(Objective Index)) >= Global.BarrierRange;
		Global.OvertimeEnabled == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Damage(Event Player, Null, 10);
		Loop If Condition Is True;
	}
}

disabled rule("Debug")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Small Message(Event Player, Global.BarrierRange);
		Loop;
	}
}

rule("Overtime Death")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.OvertimeEnabled == True;
		Global.GameEnded == False;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		disabled If(Count Of(Filtered Array(All Dead Players(Team Of(Event Player)), Is Dummy Bot(Current Array Element) == False)) == Count Of(
			Filtered Array(All Players(Team Of(Event Player)), Is Dummy Bot(Current Array Element) == False)));
		If(Number Of Living Players(Filtered Array(All Players(Team 1), Is Dummy Bot(Current Array Element) == False)) == 0);
			disabled If(Current Game Mode == Game Mode(Control));
			Destroy All HUD Text;
			Global.Winningteam = Team 2;
			Global.GameEnded = True;
			If(Current Game Mode == Game Mode(Control) || Current Game Mode == Game Mode(Elimination));
				Declare Round Victory(Global.Winningteam);
			Else;
				Declare Team Victory(Global.Winningteam);
			End;
		Else If(Number Of Living Players(Filtered Array(All Players(Team 2), Is Dummy Bot(Current Array Element) == False)) == 0);
			Destroy All HUD Text;
			Global.Winningteam = Team 1;
			Global.GameEnded = True;
			If(Current Game Mode == Game Mode(Control) || Current Game Mode == Game Mode(Elimination));
				Declare Round Victory(Global.Winningteam);
			Else;
				Declare Team Victory(Global.Winningteam);
			End;
		End;
		Loop If Condition Is True;
	}
}

rule("Overtime HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.OvertimeEnabled == True;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("SUDDEN DEATH - {0} vs {1}", Count Of(Filtered Array(All Living Players(Team Of(
			Event Player)), Is Dummy Bot(Current Array Element) == False)), Count Of(Filtered Array(All Living Players(Opposite Team Of(
			Team Of(Event Player))), Is Dummy Bot(Current Array Element) == False))), Custom String(
			"Eliminate the other team! You only have one life!"), Custom String("{0} WARNING {0} - Ring will be shrinking!", Icon String(
			Warning)), Right, -1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("Rule 96")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating Any Spray(Event Player) == True;
		Host Player == Event Player;
	}

	actions
	{
		Set Match Time(5);
	}
}

disabled rule("Champion Screen")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Winningteam == Team Of(Event Player);
		Global.GameEnded == True;
	}

	actions
	{
		"Champion"
		Create In-World Text(Event Player, Custom String("¬†¬†¬†¬†‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí\r\n¬†¬†‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí\r\n‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí"), Update Every Frame(
			Event Player + Facing Direction Of(Event Player) * 10), 4, Do Not Clip, Visible To Position and String, Custom Color(0, 0, 0,
			100), Default Visibility);
		Create In-World Text(Event Player, Custom String("‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí\r\n‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí"), Update Every Frame(
			Event Player + Facing Direction Of(Event Player) * 10), 5, Do Not Clip, Visible To Position and String, Custom Color(0, 0, 0,
			100), Default Visibility);
		Wait(0.016, Ignore Condition);
		Create In-World Text(Event Player, Custom String("\\ \\ \\\r\n  \\ \\ \\\r\n    \\ \\ \\"), Update Every Frame(
			Event Player + Facing Direction Of(Event Player) * 10), 5, Do Not Clip, Visible To Position and String, Color(Orange),
			Default Visibility);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Null, Custom String(
			"¬†\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nyou are the"), Top, 0, Color(White), Color(Yellow),
			Color(Yellow), Visible To and String, Default Visibility);
		Create In-World Text(Event Player, Custom String("CHAMPIONN"), Update Every Frame(Event Player + Facing Direction Of(Event Player)
			* 15), 10, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
		Wait(5, Ignore Condition);
		Declare Team Victory(Global.Winningteam);
	}
}

disabled rule("Gameover Screen")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Winningteam != Team Of(Event Player);
		Global.GameEnded == True;
	}

	actions
	{
		"Champion"
		Create In-World Text(Event Player, Custom String("¬†¬†¬†¬†‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí\r\n¬†¬†‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí\r\n‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí"), Update Every Frame(
			Event Player + Facing Direction Of(Event Player) * 10), 4, Do Not Clip, Visible To Position and String, Custom Color(0, 0, 0,
			100), Default Visibility);
		Create In-World Text(Event Player, Custom String("‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí\r\n‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí"), Update Every Frame(
			Event Player + Facing Direction Of(Event Player) * 10), 5, Do Not Clip, Visible To Position and String, Custom Color(0, 0, 0,
			100), Default Visibility);
		Wait(0.016, Ignore Condition);
		Create In-World Text(Event Player, Custom String("\\ \\ \\\r\n  \\ \\ \\\r\n    \\ \\ \\"), Update Every Frame(
			Event Player + Facing Direction Of(Event Player) * 10), 5, Do Not Clip, Visible To Position and String, Color(Red),
			Default Visibility);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Null, Custom String(
			"¬†\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nyou are the"), Top, 0, Color(White), Color(Red), Color(
			Red), Visible To and String, Default Visibility);
		Create In-World Text(Event Player, Custom String("GAME OVER"), Update Every Frame(Event Player + Facing Direction Of(Event Player)
			* 15), 10, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
	}
}

disabled rule("Youngsmith ABILITIES")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("Youngsmith Placing Lunchbox")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Youngsmith");
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.UsedAbility == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.UsedAbility = True;
		Event Player.AbilityActive = True;
		If(Event Player.YoungsmithLunchboxLocation == Null);
			Event Player.YoungsmithLunchboxLocation = Position Of(Event Player);
			disabled Else;
			disabled Start Camera(Event Player, Event Player.CryptoCamera[0], Event Player.CryptoCamera[1], 0);
			disabled Wait(3, Ignore Condition);
			disabled Stop Camera(Event Player);
		End;
		Small Message(All Players(Team Of(Event Player)), Custom String("{0}: I placed an armor box! Get some armor!", Hero Icon String(
			Hero Of(Event Player))));
		Create Effect(All Players(All Teams), Orb, Color(Yellow), Event Player.YoungsmithLunchboxLocation, 1,
			Visible To Position and Radius);
		Wait(Global.YoungsmithDuration, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Event Player.AbilityActive = False;
		Event Player.UsedAbility = False;
		Small Message(All Players(Team Of(Event Player)), Custom String("{0}: Armor box is no more!", Hero Icon String(Hero Of(
			Event Player))));
		Event Player.YoungsmithLunchboxLocation = Null;
	}
}

disabled rule("Youngsmith Ability Effects")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.YoungsmithLunchboxLocation != 0;
		Players Within Radius(Event Player.YoungsmithLunchboxLocation, 5, Team Of(Event Player), Off) == True;
	}

	actions
	{
		Add Health Pool To Player(Players Within Radius(Event Player.YoungsmithLunchboxLocation, 5, Team Of(Event Player), Off), Armor, 25,
			False, True);
		Wait(5, Abort When False);
		Loop If Condition Is True;
	}
}

disabled rule("Youngsmith Armor Box Effects")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ChosenLegend == Custom String("Youngsmith");
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.UsingUlt == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		If(Global.UltimateGenerationType == True);
			Event Player.UltimateGen = 0;
		End;
		Big Message(All Dead Players(Team Of(Event Player)), Custom String("{0}: You deserve a second chance!", Hero Icon String(Hero Of(
			Event Player))));
		Event Player.UsingUlt = True;
		Event Player.UltActive = True;
		Resurrect(All Dead Players(Team Of(Event Player)));
		Add Health Pool To Player(All Players(Team Of(Event Player)), Armor, 100, False, True);
		Big Message(All Players(Team Of(Event Player)), Custom String("{0}: Have some extra armor to help you out!", Hero Icon String(
			Hero Of(Event Player))));
	}
}

rule("Kill Leader")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Global.KillLeader != Event Player;
	}

	actions
	{
		If(Player Stat(Event Player, Final Blows) > Player Stat(Global.KillLeader, Final Blows));
			Big Message(Global.KillLeader, Custom String("You lost your Kill Leader to {0}", Event Player));
			Global.KillLeader = Event Player;
			Big Message(Event Player, Custom String("You are the new kill leader!"));
	}
}

rule("Announce Ultimate when ready")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Communicate(Event Player, Ultimate Status);
	}
}
